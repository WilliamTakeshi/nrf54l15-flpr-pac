#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - VPRCLIC_0"]
    VPRCLIC_0 = 0,
    #[doc = "1 - VPRCLIC_1"]
    VPRCLIC_1 = 1,
    #[doc = "2 - VPRCLIC_2"]
    VPRCLIC_2 = 2,
    #[doc = "3 - VPRCLIC_3"]
    VPRCLIC_3 = 3,
    #[doc = "4 - VPRCLIC_4"]
    VPRCLIC_4 = 4,
    #[doc = "5 - VPRCLIC_5"]
    VPRCLIC_5 = 5,
    #[doc = "6 - VPRCLIC_6"]
    VPRCLIC_6 = 6,
    #[doc = "7 - VPRCLIC_7"]
    VPRCLIC_7 = 7,
    #[doc = "8 - VPRCLIC_8"]
    VPRCLIC_8 = 8,
    #[doc = "9 - VPRCLIC_9"]
    VPRCLIC_9 = 9,
    #[doc = "10 - VPRCLIC_10"]
    VPRCLIC_10 = 10,
    #[doc = "11 - VPRCLIC_11"]
    VPRCLIC_11 = 11,
    #[doc = "12 - VPRCLIC_12"]
    VPRCLIC_12 = 12,
    #[doc = "13 - VPRCLIC_13"]
    VPRCLIC_13 = 13,
    #[doc = "14 - VPRCLIC_14"]
    VPRCLIC_14 = 14,
    #[doc = "15 - VPRCLIC_15"]
    VPRCLIC_15 = 15,
    #[doc = "16 - VPRCLIC_16"]
    VPRCLIC_16 = 16,
    #[doc = "17 - VPRCLIC_17"]
    VPRCLIC_17 = 17,
    #[doc = "18 - VPRCLIC_18"]
    VPRCLIC_18 = 18,
    #[doc = "19 - VPRCLIC_19"]
    VPRCLIC_19 = 19,
    #[doc = "20 - VPRCLIC_20"]
    VPRCLIC_20 = 20,
    #[doc = "21 - VPRCLIC_21"]
    VPRCLIC_21 = 21,
    #[doc = "22 - VPRCLIC_22"]
    VPRCLIC_22 = 22,
    #[doc = "23 - VPRCLIC_23"]
    VPRCLIC_23 = 23,
    #[doc = "24 - VPRCLIC_24"]
    VPRCLIC_24 = 24,
    #[doc = "25 - VPRCLIC_25"]
    VPRCLIC_25 = 25,
    #[doc = "26 - VPRCLIC_26"]
    VPRCLIC_26 = 26,
    #[doc = "27 - VPRCLIC_27"]
    VPRCLIC_27 = 27,
    #[doc = "28 - VPRCLIC_28"]
    VPRCLIC_28 = 28,
    #[doc = "29 - VPRCLIC_29"]
    VPRCLIC_29 = 29,
    #[doc = "30 - VPRCLIC_30"]
    VPRCLIC_30 = 30,
    #[doc = "31 - VPRCLIC_31"]
    VPRCLIC_31 = 31,
    #[doc = "64 - SPU00"]
    SPU00 = 64,
    #[doc = "65 - MPC00"]
    MPC00 = 65,
    #[doc = "70 - AAR00_CCM00"]
    AAR00_CCM00 = 70,
    #[doc = "71 - ECB00"]
    ECB00 = 71,
    #[doc = "72 - CRACEN"]
    CRACEN = 72,
    #[doc = "74 - SERIAL00"]
    SERIAL00 = 74,
    #[doc = "75 - RRAMC"]
    RRAMC = 75,
    #[doc = "76 - VPR00"]
    VPR00 = 76,
    #[doc = "82 - CTRLAP"]
    CTRLAP = 82,
    #[doc = "85 - TIMER00"]
    TIMER00 = 85,
    #[doc = "128 - SPU10"]
    SPU10 = 128,
    #[doc = "133 - TIMER10"]
    TIMER10 = 133,
    #[doc = "134 - RTC10"]
    RTC10 = 134,
    #[doc = "135 - EGU10"]
    EGU10 = 135,
    #[doc = "138 - RADIO_0"]
    RADIO_0 = 138,
    #[doc = "139 - RADIO_1"]
    RADIO_1 = 139,
    #[doc = "192 - SPU20"]
    SPU20 = 192,
    #[doc = "198 - SERIAL20"]
    SERIAL20 = 198,
    #[doc = "199 - SERIAL21"]
    SERIAL21 = 199,
    #[doc = "200 - SERIAL22"]
    SERIAL22 = 200,
    #[doc = "201 - EGU20"]
    EGU20 = 201,
    #[doc = "202 - TIMER20"]
    TIMER20 = 202,
    #[doc = "203 - TIMER21"]
    TIMER21 = 203,
    #[doc = "204 - TIMER22"]
    TIMER22 = 204,
    #[doc = "205 - TIMER23"]
    TIMER23 = 205,
    #[doc = "206 - TIMER24"]
    TIMER24 = 206,
    #[doc = "208 - PDM20"]
    PDM20 = 208,
    #[doc = "209 - PDM21"]
    PDM21 = 209,
    #[doc = "210 - PWM20"]
    PWM20 = 210,
    #[doc = "211 - PWM21"]
    PWM21 = 211,
    #[doc = "212 - PWM22"]
    PWM22 = 212,
    #[doc = "213 - SAADC"]
    SAADC = 213,
    #[doc = "214 - NFCT"]
    NFCT = 214,
    #[doc = "215 - TEMP"]
    TEMP = 215,
    #[doc = "218 - GPIOTE20_0"]
    GPIOTE20_0 = 218,
    #[doc = "219 - GPIOTE20_1"]
    GPIOTE20_1 = 219,
    #[doc = "220 - TAMPC"]
    TAMPC = 220,
    #[doc = "221 - I2S20"]
    I2S20 = 221,
    #[doc = "224 - QDEC20"]
    QDEC20 = 224,
    #[doc = "225 - QDEC21"]
    QDEC21 = 225,
    #[doc = "226 - GRTC_0"]
    GRTC_0 = 226,
    #[doc = "227 - GRTC_1"]
    GRTC_1 = 227,
    #[doc = "228 - GRTC_2"]
    GRTC_2 = 228,
    #[doc = "229 - GRTC_3"]
    GRTC_3 = 229,
    #[doc = "256 - SPU30"]
    SPU30 = 256,
    #[doc = "260 - SERIAL30"]
    SERIAL30 = 260,
    #[doc = "261 - CLOCK_POWER"]
    CLOCK_POWER = 261,
    #[doc = "262 - COMP_LPCOMP"]
    COMP_LPCOMP = 262,
    #[doc = "264 - WDT30"]
    WDT30 = 264,
    #[doc = "265 - WDT31"]
    WDT31 = 265,
    #[doc = "268 - GPIOTE30_0"]
    GPIOTE30_0 = 268,
    #[doc = "269 - GPIOTE30_1"]
    GPIOTE30_1 = 269,
}
#[doc = r" TryFromInterruptError"]
#[derive(Debug, Copy, Clone)]
pub struct TryFromInterruptError(());
impl Interrupt {
    #[doc = r" Attempt to convert a given value into an `Interrupt`"]
    #[inline]
    pub fn try_from(value: u16) -> Result<Self, TryFromInterruptError> {
        match value {
            0 => Ok(Interrupt::VPRCLIC_0),
            1 => Ok(Interrupt::VPRCLIC_1),
            2 => Ok(Interrupt::VPRCLIC_2),
            3 => Ok(Interrupt::VPRCLIC_3),
            4 => Ok(Interrupt::VPRCLIC_4),
            5 => Ok(Interrupt::VPRCLIC_5),
            6 => Ok(Interrupt::VPRCLIC_6),
            7 => Ok(Interrupt::VPRCLIC_7),
            8 => Ok(Interrupt::VPRCLIC_8),
            9 => Ok(Interrupt::VPRCLIC_9),
            10 => Ok(Interrupt::VPRCLIC_10),
            11 => Ok(Interrupt::VPRCLIC_11),
            12 => Ok(Interrupt::VPRCLIC_12),
            13 => Ok(Interrupt::VPRCLIC_13),
            14 => Ok(Interrupt::VPRCLIC_14),
            15 => Ok(Interrupt::VPRCLIC_15),
            16 => Ok(Interrupt::VPRCLIC_16),
            17 => Ok(Interrupt::VPRCLIC_17),
            18 => Ok(Interrupt::VPRCLIC_18),
            19 => Ok(Interrupt::VPRCLIC_19),
            20 => Ok(Interrupt::VPRCLIC_20),
            21 => Ok(Interrupt::VPRCLIC_21),
            22 => Ok(Interrupt::VPRCLIC_22),
            23 => Ok(Interrupt::VPRCLIC_23),
            24 => Ok(Interrupt::VPRCLIC_24),
            25 => Ok(Interrupt::VPRCLIC_25),
            26 => Ok(Interrupt::VPRCLIC_26),
            27 => Ok(Interrupt::VPRCLIC_27),
            28 => Ok(Interrupt::VPRCLIC_28),
            29 => Ok(Interrupt::VPRCLIC_29),
            30 => Ok(Interrupt::VPRCLIC_30),
            31 => Ok(Interrupt::VPRCLIC_31),
            64 => Ok(Interrupt::SPU00),
            65 => Ok(Interrupt::MPC00),
            70 => Ok(Interrupt::AAR00_CCM00),
            71 => Ok(Interrupt::ECB00),
            72 => Ok(Interrupt::CRACEN),
            74 => Ok(Interrupt::SERIAL00),
            75 => Ok(Interrupt::RRAMC),
            76 => Ok(Interrupt::VPR00),
            82 => Ok(Interrupt::CTRLAP),
            85 => Ok(Interrupt::TIMER00),
            128 => Ok(Interrupt::SPU10),
            133 => Ok(Interrupt::TIMER10),
            134 => Ok(Interrupt::RTC10),
            135 => Ok(Interrupt::EGU10),
            138 => Ok(Interrupt::RADIO_0),
            139 => Ok(Interrupt::RADIO_1),
            192 => Ok(Interrupt::SPU20),
            198 => Ok(Interrupt::SERIAL20),
            199 => Ok(Interrupt::SERIAL21),
            200 => Ok(Interrupt::SERIAL22),
            201 => Ok(Interrupt::EGU20),
            202 => Ok(Interrupt::TIMER20),
            203 => Ok(Interrupt::TIMER21),
            204 => Ok(Interrupt::TIMER22),
            205 => Ok(Interrupt::TIMER23),
            206 => Ok(Interrupt::TIMER24),
            208 => Ok(Interrupt::PDM20),
            209 => Ok(Interrupt::PDM21),
            210 => Ok(Interrupt::PWM20),
            211 => Ok(Interrupt::PWM21),
            212 => Ok(Interrupt::PWM22),
            213 => Ok(Interrupt::SAADC),
            214 => Ok(Interrupt::NFCT),
            215 => Ok(Interrupt::TEMP),
            218 => Ok(Interrupt::GPIOTE20_0),
            219 => Ok(Interrupt::GPIOTE20_1),
            220 => Ok(Interrupt::TAMPC),
            221 => Ok(Interrupt::I2S20),
            224 => Ok(Interrupt::QDEC20),
            225 => Ok(Interrupt::QDEC21),
            226 => Ok(Interrupt::GRTC_0),
            227 => Ok(Interrupt::GRTC_1),
            228 => Ok(Interrupt::GRTC_2),
            229 => Ok(Interrupt::GRTC_3),
            256 => Ok(Interrupt::SPU30),
            260 => Ok(Interrupt::SERIAL30),
            261 => Ok(Interrupt::CLOCK_POWER),
            262 => Ok(Interrupt::COMP_LPCOMP),
            264 => Ok(Interrupt::WDT30),
            265 => Ok(Interrupt::WDT31),
            268 => Ok(Interrupt::GPIOTE30_0),
            269 => Ok(Interrupt::GPIOTE30_1),
            _ => Err(TryFromInterruptError(())),
        }
    }
}
#[cfg(feature = "rt")]
#[macro_export]
#[doc = r" Assigns a handler to an interrupt"]
#[doc = r""]
#[doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
#[doc = r" function that will be used as the handler of that interrupt. That function"]
#[doc = r" must have signature `fn()`."]
#[doc = r""]
#[doc = r" Optionally, a third argument may be used to declare interrupt local data."]
#[doc = r" The handler will have exclusive access to these *local* variables on each"]
#[doc = r" invocation. If the third argument is used then the signature of the handler"]
#[doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
#[doc = r" passed to the macro."]
#[doc = r""]
#[doc = r" # Example"]
#[doc = r""]
#[doc = r" ``` ignore"]
#[doc = r" interrupt!(TIM2, periodic);"]
#[doc = r""]
#[doc = r" fn periodic() {"]
#[doc = r#"     print!(".");"#]
#[doc = r" }"]
#[doc = r""]
#[doc = r" interrupt!(TIM3, tick, locals: {"]
#[doc = r"     tick: bool = false;"]
#[doc = r" });"]
#[doc = r""]
#[doc = r" fn tick(locals: &mut TIM3::Locals) {"]
#[doc = r"     locals.tick = !locals.tick;"]
#[doc = r""]
#[doc = r"     if locals.tick {"]
#[doc = r#"         println!("Tick");"#]
#[doc = r"     } else {"]
#[doc = r#"         println!("Tock");"#]
#[doc = r"     }"]
#[doc = r" }"]
#[doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)] mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)] # [no_mangle] pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)] # [no_mangle] pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } }
