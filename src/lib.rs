#![doc = "Peripheral access API for NRF54L15_FLPR microcontrollers (generated using svd2rust v0.37.0 (87c2fc4 2025-08-15))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn VPRCLIC_0();
    fn VPRCLIC_1();
    fn VPRCLIC_2();
    fn VPRCLIC_3();
    fn VPRCLIC_4();
    fn VPRCLIC_5();
    fn VPRCLIC_6();
    fn VPRCLIC_7();
    fn VPRCLIC_8();
    fn VPRCLIC_9();
    fn VPRCLIC_10();
    fn VPRCLIC_11();
    fn VPRCLIC_12();
    fn VPRCLIC_13();
    fn VPRCLIC_14();
    fn VPRCLIC_15();
    fn VPRCLIC_16();
    fn VPRCLIC_17();
    fn VPRCLIC_18();
    fn VPRCLIC_19();
    fn VPRCLIC_20();
    fn VPRCLIC_21();
    fn VPRCLIC_22();
    fn VPRCLIC_23();
    fn VPRCLIC_24();
    fn VPRCLIC_25();
    fn VPRCLIC_26();
    fn VPRCLIC_27();
    fn VPRCLIC_28();
    fn VPRCLIC_29();
    fn VPRCLIC_30();
    fn VPRCLIC_31();
    fn SPU00();
    fn MPC00();
    fn AAR00_CCM00();
    fn ECB00();
    fn CRACEN();
    fn SERIAL00();
    fn RRAMC();
    fn VPR00();
    fn CTRLAP();
    fn TIMER00();
    fn SPU10();
    fn TIMER10();
    fn RTC10();
    fn EGU10();
    fn RADIO_0();
    fn RADIO_1();
    fn SPU20();
    fn SERIAL20();
    fn SERIAL21();
    fn SERIAL22();
    fn EGU20();
    fn TIMER20();
    fn TIMER21();
    fn TIMER22();
    fn TIMER23();
    fn TIMER24();
    fn PDM20();
    fn PDM21();
    fn PWM20();
    fn PWM21();
    fn PWM22();
    fn SAADC();
    fn NFCT();
    fn TEMP();
    fn GPIOTE20_0();
    fn GPIOTE20_1();
    fn TAMPC();
    fn I2S20();
    fn QDEC20();
    fn QDEC21();
    fn GRTC_0();
    fn GRTC_1();
    fn GRTC_2();
    fn GRTC_3();
    fn SPU30();
    fn SERIAL30();
    fn RTC30();
    fn COMP_LPCOMP();
    fn WDT30();
    fn WDT31();
    fn GPIOTE30_0();
    fn GPIOTE30_1();
    fn CLOCK_POWER();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 271] = [
    Vector {
        _handler: VPRCLIC_0,
    },
    Vector {
        _handler: VPRCLIC_1,
    },
    Vector {
        _handler: VPRCLIC_2,
    },
    Vector {
        _handler: VPRCLIC_3,
    },
    Vector {
        _handler: VPRCLIC_4,
    },
    Vector {
        _handler: VPRCLIC_5,
    },
    Vector {
        _handler: VPRCLIC_6,
    },
    Vector {
        _handler: VPRCLIC_7,
    },
    Vector {
        _handler: VPRCLIC_8,
    },
    Vector {
        _handler: VPRCLIC_9,
    },
    Vector {
        _handler: VPRCLIC_10,
    },
    Vector {
        _handler: VPRCLIC_11,
    },
    Vector {
        _handler: VPRCLIC_12,
    },
    Vector {
        _handler: VPRCLIC_13,
    },
    Vector {
        _handler: VPRCLIC_14,
    },
    Vector {
        _handler: VPRCLIC_15,
    },
    Vector {
        _handler: VPRCLIC_16,
    },
    Vector {
        _handler: VPRCLIC_17,
    },
    Vector {
        _handler: VPRCLIC_18,
    },
    Vector {
        _handler: VPRCLIC_19,
    },
    Vector {
        _handler: VPRCLIC_20,
    },
    Vector {
        _handler: VPRCLIC_21,
    },
    Vector {
        _handler: VPRCLIC_22,
    },
    Vector {
        _handler: VPRCLIC_23,
    },
    Vector {
        _handler: VPRCLIC_24,
    },
    Vector {
        _handler: VPRCLIC_25,
    },
    Vector {
        _handler: VPRCLIC_26,
    },
    Vector {
        _handler: VPRCLIC_27,
    },
    Vector {
        _handler: VPRCLIC_28,
    },
    Vector {
        _handler: VPRCLIC_29,
    },
    Vector {
        _handler: VPRCLIC_30,
    },
    Vector {
        _handler: VPRCLIC_31,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPU00 },
    Vector { _handler: MPC00 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: AAR00_CCM00,
    },
    Vector { _handler: ECB00 },
    Vector { _handler: CRACEN },
    Vector { _reserved: 0 },
    Vector { _handler: SERIAL00 },
    Vector { _handler: RRAMC },
    Vector { _handler: VPR00 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: CTRLAP },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIMER00 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPU10 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIMER10 },
    Vector { _handler: RTC10 },
    Vector { _handler: EGU10 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RADIO_0 },
    Vector { _handler: RADIO_1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPU20 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SERIAL20 },
    Vector { _handler: SERIAL21 },
    Vector { _handler: SERIAL22 },
    Vector { _handler: EGU20 },
    Vector { _handler: TIMER20 },
    Vector { _handler: TIMER21 },
    Vector { _handler: TIMER22 },
    Vector { _handler: TIMER23 },
    Vector { _handler: TIMER24 },
    Vector { _reserved: 0 },
    Vector { _handler: PDM20 },
    Vector { _handler: PDM21 },
    Vector { _handler: PWM20 },
    Vector { _handler: PWM21 },
    Vector { _handler: PWM22 },
    Vector { _handler: SAADC },
    Vector { _handler: NFCT },
    Vector { _handler: TEMP },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: GPIOTE20_0,
    },
    Vector {
        _handler: GPIOTE20_1,
    },
    Vector { _handler: TAMPC },
    Vector { _handler: I2S20 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: QDEC20 },
    Vector { _handler: QDEC21 },
    Vector { _handler: GRTC_0 },
    Vector { _handler: GRTC_1 },
    Vector { _handler: GRTC_2 },
    Vector { _handler: GRTC_3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SPU30 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SERIAL30 },
    Vector { _handler: RTC30 },
    Vector {
        _handler: COMP_LPCOMP,
    },
    Vector { _reserved: 0 },
    Vector { _handler: WDT30 },
    Vector { _handler: WDT31 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: GPIOTE30_0,
    },
    Vector {
        _handler: GPIOTE30_1,
    },
    Vector {
        _handler: CLOCK_POWER,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - VPRCLIC_0"]
    VPRCLIC_0 = 0,
    #[doc = "1 - VPRCLIC_1"]
    VPRCLIC_1 = 1,
    #[doc = "2 - VPRCLIC_2"]
    VPRCLIC_2 = 2,
    #[doc = "3 - VPRCLIC_3"]
    VPRCLIC_3 = 3,
    #[doc = "4 - VPRCLIC_4"]
    VPRCLIC_4 = 4,
    #[doc = "5 - VPRCLIC_5"]
    VPRCLIC_5 = 5,
    #[doc = "6 - VPRCLIC_6"]
    VPRCLIC_6 = 6,
    #[doc = "7 - VPRCLIC_7"]
    VPRCLIC_7 = 7,
    #[doc = "8 - VPRCLIC_8"]
    VPRCLIC_8 = 8,
    #[doc = "9 - VPRCLIC_9"]
    VPRCLIC_9 = 9,
    #[doc = "10 - VPRCLIC_10"]
    VPRCLIC_10 = 10,
    #[doc = "11 - VPRCLIC_11"]
    VPRCLIC_11 = 11,
    #[doc = "12 - VPRCLIC_12"]
    VPRCLIC_12 = 12,
    #[doc = "13 - VPRCLIC_13"]
    VPRCLIC_13 = 13,
    #[doc = "14 - VPRCLIC_14"]
    VPRCLIC_14 = 14,
    #[doc = "15 - VPRCLIC_15"]
    VPRCLIC_15 = 15,
    #[doc = "16 - VPRCLIC_16"]
    VPRCLIC_16 = 16,
    #[doc = "17 - VPRCLIC_17"]
    VPRCLIC_17 = 17,
    #[doc = "18 - VPRCLIC_18"]
    VPRCLIC_18 = 18,
    #[doc = "19 - VPRCLIC_19"]
    VPRCLIC_19 = 19,
    #[doc = "20 - VPRCLIC_20"]
    VPRCLIC_20 = 20,
    #[doc = "21 - VPRCLIC_21"]
    VPRCLIC_21 = 21,
    #[doc = "22 - VPRCLIC_22"]
    VPRCLIC_22 = 22,
    #[doc = "23 - VPRCLIC_23"]
    VPRCLIC_23 = 23,
    #[doc = "24 - VPRCLIC_24"]
    VPRCLIC_24 = 24,
    #[doc = "25 - VPRCLIC_25"]
    VPRCLIC_25 = 25,
    #[doc = "26 - VPRCLIC_26"]
    VPRCLIC_26 = 26,
    #[doc = "27 - VPRCLIC_27"]
    VPRCLIC_27 = 27,
    #[doc = "28 - VPRCLIC_28"]
    VPRCLIC_28 = 28,
    #[doc = "29 - VPRCLIC_29"]
    VPRCLIC_29 = 29,
    #[doc = "30 - VPRCLIC_30"]
    VPRCLIC_30 = 30,
    #[doc = "31 - VPRCLIC_31"]
    VPRCLIC_31 = 31,
    #[doc = "64 - SPU00"]
    SPU00 = 64,
    #[doc = "65 - MPC00"]
    MPC00 = 65,
    #[doc = "70 - AAR00_CCM00"]
    AAR00_CCM00 = 70,
    #[doc = "71 - ECB00"]
    ECB00 = 71,
    #[doc = "72 - CRACEN"]
    CRACEN = 72,
    #[doc = "74 - SERIAL00"]
    SERIAL00 = 74,
    #[doc = "75 - RRAMC"]
    RRAMC = 75,
    #[doc = "76 - VPR00"]
    VPR00 = 76,
    #[doc = "82 - CTRLAP"]
    CTRLAP = 82,
    #[doc = "85 - TIMER00"]
    TIMER00 = 85,
    #[doc = "128 - SPU10"]
    SPU10 = 128,
    #[doc = "133 - TIMER10"]
    TIMER10 = 133,
    #[doc = "134 - RTC10"]
    RTC10 = 134,
    #[doc = "135 - EGU10"]
    EGU10 = 135,
    #[doc = "138 - RADIO_0"]
    RADIO_0 = 138,
    #[doc = "139 - RADIO_1"]
    RADIO_1 = 139,
    #[doc = "192 - SPU20"]
    SPU20 = 192,
    #[doc = "198 - SERIAL20"]
    SERIAL20 = 198,
    #[doc = "199 - SERIAL21"]
    SERIAL21 = 199,
    #[doc = "200 - SERIAL22"]
    SERIAL22 = 200,
    #[doc = "201 - EGU20"]
    EGU20 = 201,
    #[doc = "202 - TIMER20"]
    TIMER20 = 202,
    #[doc = "203 - TIMER21"]
    TIMER21 = 203,
    #[doc = "204 - TIMER22"]
    TIMER22 = 204,
    #[doc = "205 - TIMER23"]
    TIMER23 = 205,
    #[doc = "206 - TIMER24"]
    TIMER24 = 206,
    #[doc = "208 - PDM20"]
    PDM20 = 208,
    #[doc = "209 - PDM21"]
    PDM21 = 209,
    #[doc = "210 - PWM20"]
    PWM20 = 210,
    #[doc = "211 - PWM21"]
    PWM21 = 211,
    #[doc = "212 - PWM22"]
    PWM22 = 212,
    #[doc = "213 - SAADC"]
    SAADC = 213,
    #[doc = "214 - NFCT"]
    NFCT = 214,
    #[doc = "215 - TEMP"]
    TEMP = 215,
    #[doc = "218 - GPIOTE20_0"]
    GPIOTE20_0 = 218,
    #[doc = "219 - GPIOTE20_1"]
    GPIOTE20_1 = 219,
    #[doc = "220 - TAMPC"]
    TAMPC = 220,
    #[doc = "221 - I2S20"]
    I2S20 = 221,
    #[doc = "224 - QDEC20"]
    QDEC20 = 224,
    #[doc = "225 - QDEC21"]
    QDEC21 = 225,
    #[doc = "226 - GRTC_0"]
    GRTC_0 = 226,
    #[doc = "227 - GRTC_1"]
    GRTC_1 = 227,
    #[doc = "228 - GRTC_2"]
    GRTC_2 = 228,
    #[doc = "229 - GRTC_3"]
    GRTC_3 = 229,
    #[doc = "256 - SPU30"]
    SPU30 = 256,
    #[doc = "260 - SERIAL30"]
    SERIAL30 = 260,
    #[doc = "261 - RTC30"]
    RTC30 = 261,
    #[doc = "262 - COMP_LPCOMP"]
    COMP_LPCOMP = 262,
    #[doc = "264 - WDT30"]
    WDT30 = 264,
    #[doc = "265 - WDT31"]
    WDT31 = 265,
    #[doc = "268 - GPIOTE30_0"]
    GPIOTE30_0 = 268,
    #[doc = "269 - GPIOTE30_1"]
    GPIOTE30_1 = 269,
    #[doc = "270 - CLOCK_POWER"]
    CLOCK_POWER = 270,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Factory Information Configuration Registers"]
pub type GlobalFicrNs = crate::Periph<global_ficr_ns::RegisterBlock, 0x00ff_c000>;
impl core::fmt::Debug for GlobalFicrNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalFicrNs").finish()
    }
}
#[doc = "Factory Information Configuration Registers"]
pub mod global_ficr_ns;
#[doc = "User Information Configuration Registers"]
pub type GlobalUicrS = crate::Periph<global_uicr_s::RegisterBlock, 0x00ff_d000>;
impl core::fmt::Debug for GlobalUicrS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUicrS").finish()
    }
}
#[doc = "User Information Configuration Registers"]
pub mod global_uicr_s;
#[doc = "Factory Information Configuration Registers"]
pub type GlobalSicrS = crate::Periph<global_sicr_s::RegisterBlock, 0x00ff_e000>;
impl core::fmt::Debug for GlobalSicrS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSicrS").finish()
    }
}
#[doc = "Factory Information Configuration Registers"]
pub mod global_sicr_s;
#[doc = "CRACENCORE"]
pub type GlobalCracencoreS = crate::Periph<global_cracencore_s::RegisterBlock, 0x5180_0000>;
impl core::fmt::Debug for GlobalCracencoreS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCracencoreS").finish()
    }
}
#[doc = "CRACENCORE"]
pub mod global_cracencore_s;
#[doc = "VPR CLIC registers"]
pub type VprclicNs = crate::Periph<vprclic_ns::RegisterBlock, 0xf000_0000>;
impl core::fmt::Debug for VprclicNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VprclicNs").finish()
    }
}
#[doc = "VPR CLIC registers"]
pub mod vprclic_ns;
#[doc = "System protection unit 0"]
pub type GlobalSpu00S = crate::Periph<global_spu00_s::RegisterBlock, 0x5004_0000>;
impl core::fmt::Debug for GlobalSpu00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpu00S").finish()
    }
}
#[doc = "System protection unit 0"]
pub mod global_spu00_s;
#[doc = "Memory Privilege Controller"]
pub type GlobalMpc00S = crate::Periph<global_mpc00_s::RegisterBlock, 0x5004_1000>;
impl core::fmt::Debug for GlobalMpc00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalMpc00S").finish()
    }
}
#[doc = "Memory Privilege Controller"]
pub mod global_mpc00_s;
#[doc = "Distributed programmable peripheral interconnect controller 0"]
pub type GlobalDppic00Ns = crate::Periph<global_dppic00_ns::RegisterBlock, 0x4004_2000>;
impl core::fmt::Debug for GlobalDppic00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic00Ns").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 0"]
pub mod global_dppic00_ns;
#[doc = "Distributed programmable peripheral interconnect controller 1"]
pub type GlobalDppic00S = crate::Periph<global_dppic00_ns::RegisterBlock, 0x5004_2000>;
impl core::fmt::Debug for GlobalDppic00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic00S").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 1"]
pub use self::global_dppic00_ns as global_dppic00_s;
#[doc = "PPIB APB registers 0"]
pub type GlobalPpib00Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x4004_3000>;
impl core::fmt::Debug for GlobalPpib00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib00Ns").finish()
    }
}
#[doc = "PPIB APB registers 0"]
pub mod global_ppib00_ns;
#[doc = "PPIB APB registers 1"]
pub type GlobalPpib00S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x5004_3000>;
impl core::fmt::Debug for GlobalPpib00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib00S").finish()
    }
}
#[doc = "PPIB APB registers 1"]
pub use self::global_ppib00_ns as global_ppib00_s;
#[doc = "PPIB APB registers 2"]
pub type GlobalPpib01Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x4004_4000>;
impl core::fmt::Debug for GlobalPpib01Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib01Ns").finish()
    }
}
#[doc = "PPIB APB registers 2"]
pub use self::global_ppib00_ns as global_ppib01_ns;
#[doc = "PPIB APB registers 3"]
pub type GlobalPpib01S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x5004_4000>;
impl core::fmt::Debug for GlobalPpib01S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib01S").finish()
    }
}
#[doc = "PPIB APB registers 3"]
pub use self::global_ppib00_ns as global_ppib01_s;
#[doc = "Key management unit"]
pub type GlobalKmuS = crate::Periph<global_kmu_s::RegisterBlock, 0x5004_5000>;
impl core::fmt::Debug for GlobalKmuS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalKmuS").finish()
    }
}
#[doc = "Key management unit"]
pub mod global_kmu_s;
#[doc = "Accelerated Address Resolver 0"]
pub type GlobalAar00Ns = crate::Periph<global_aar00_ns::RegisterBlock, 0x4004_6000>;
impl core::fmt::Debug for GlobalAar00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalAar00Ns").finish()
    }
}
#[doc = "Accelerated Address Resolver 0"]
pub mod global_aar00_ns;
#[doc = "AES CCM Mode Encryption 0"]
pub type GlobalCcm00Ns = crate::Periph<global_ccm00_ns::RegisterBlock, 0x4004_6000>;
impl core::fmt::Debug for GlobalCcm00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCcm00Ns").finish()
    }
}
#[doc = "AES CCM Mode Encryption 0"]
pub mod global_ccm00_ns;
#[doc = "Accelerated Address Resolver 1"]
pub type GlobalAar00S = crate::Periph<global_aar00_ns::RegisterBlock, 0x5004_6000>;
impl core::fmt::Debug for GlobalAar00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalAar00S").finish()
    }
}
#[doc = "Accelerated Address Resolver 1"]
pub use self::global_aar00_ns as global_aar00_s;
#[doc = "AES CCM Mode Encryption 1"]
pub type GlobalCcm00S = crate::Periph<global_ccm00_ns::RegisterBlock, 0x5004_6000>;
impl core::fmt::Debug for GlobalCcm00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCcm00S").finish()
    }
}
#[doc = "AES CCM Mode Encryption 1"]
pub use self::global_ccm00_ns as global_ccm00_s;
#[doc = "AES ECB Mode Encryption 0"]
pub type GlobalEcb00Ns = crate::Periph<global_ecb00_ns::RegisterBlock, 0x4004_7000>;
impl core::fmt::Debug for GlobalEcb00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEcb00Ns").finish()
    }
}
#[doc = "AES ECB Mode Encryption 0"]
pub mod global_ecb00_ns;
#[doc = "AES ECB Mode Encryption 1"]
pub type GlobalEcb00S = crate::Periph<global_ecb00_ns::RegisterBlock, 0x5004_7000>;
impl core::fmt::Debug for GlobalEcb00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEcb00S").finish()
    }
}
#[doc = "AES ECB Mode Encryption 1"]
pub use self::global_ecb00_ns as global_ecb00_s;
#[doc = "CRACEN"]
pub type GlobalCracenS = crate::Periph<global_cracen_s::RegisterBlock, 0x5004_8000>;
impl core::fmt::Debug for GlobalCracenS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCracenS").finish()
    }
}
#[doc = "CRACEN"]
pub mod global_cracen_s;
#[doc = "Serial Peripheral Interface Master with EasyDMA 0"]
pub type GlobalSpim00Ns = crate::Periph<global_spim00_ns::RegisterBlock, 0x4004_a000>;
impl core::fmt::Debug for GlobalSpim00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim00Ns").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 0"]
pub mod global_spim00_ns;
#[doc = "SPI Slave 0"]
pub type GlobalSpis00Ns = crate::Periph<global_spis00_ns::RegisterBlock, 0x4004_a000>;
impl core::fmt::Debug for GlobalSpis00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis00Ns").finish()
    }
}
#[doc = "SPI Slave 0"]
pub mod global_spis00_ns;
#[doc = "UART with EasyDMA 0"]
pub type GlobalUarte00Ns = crate::Periph<global_uarte00_ns::RegisterBlock, 0x4004_a000>;
impl core::fmt::Debug for GlobalUarte00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte00Ns").finish()
    }
}
#[doc = "UART with EasyDMA 0"]
pub mod global_uarte00_ns;
#[doc = "Serial Peripheral Interface Master with EasyDMA 1"]
pub type GlobalSpim00S = crate::Periph<global_spim00_ns::RegisterBlock, 0x5004_a000>;
impl core::fmt::Debug for GlobalSpim00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim00S").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 1"]
pub use self::global_spim00_ns as global_spim00_s;
#[doc = "SPI Slave 1"]
pub type GlobalSpis00S = crate::Periph<global_spis00_ns::RegisterBlock, 0x5004_a000>;
impl core::fmt::Debug for GlobalSpis00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis00S").finish()
    }
}
#[doc = "SPI Slave 1"]
pub use self::global_spis00_ns as global_spis00_s;
#[doc = "UART with EasyDMA 1"]
pub type GlobalUarte00S = crate::Periph<global_uarte00_ns::RegisterBlock, 0x5004_a000>;
impl core::fmt::Debug for GlobalUarte00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte00S").finish()
    }
}
#[doc = "UART with EasyDMA 1"]
pub use self::global_uarte00_ns as global_uarte00_s;
#[doc = "Voltage glitch detectors"]
pub type GlobalGlitchdetS = crate::Periph<global_glitchdet_s::RegisterBlock, 0x5004_b000>;
impl core::fmt::Debug for GlobalGlitchdetS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGlitchdetS").finish()
    }
}
#[doc = "Voltage glitch detectors"]
pub mod global_glitchdet_s;
#[doc = "RRAM controller GLITCH detector"]
pub type GlobalRramcS = crate::Periph<global_rramc_s::RegisterBlock, 0x5004_b000>;
impl core::fmt::Debug for GlobalRramcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRramcS").finish()
    }
}
#[doc = "RRAM controller GLITCH detector"]
pub mod global_rramc_s;
#[doc = "VPR peripheral registers 0"]
pub type GlobalVpr00Ns = crate::Periph<global_vpr00_ns::RegisterBlock, 0x4004_c000>;
impl core::fmt::Debug for GlobalVpr00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalVpr00Ns").finish()
    }
}
#[doc = "VPR peripheral registers 0"]
pub mod global_vpr00_ns;
#[doc = "VPR peripheral registers 1"]
pub type GlobalVpr00S = crate::Periph<global_vpr00_ns::RegisterBlock, 0x5004_c000>;
impl core::fmt::Debug for GlobalVpr00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalVpr00S").finish()
    }
}
#[doc = "VPR peripheral registers 1"]
pub use self::global_vpr00_ns as global_vpr00_s;
#[doc = "GPIO Port 0"]
pub type GlobalP2Ns = crate::Periph<global_p2_ns::RegisterBlock, 0x4005_0400>;
impl core::fmt::Debug for GlobalP2Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP2Ns").finish()
    }
}
#[doc = "GPIO Port 0"]
pub mod global_p2_ns;
#[doc = "GPIO Port 1"]
pub type GlobalP2S = crate::Periph<global_p2_ns::RegisterBlock, 0x5005_0400>;
impl core::fmt::Debug for GlobalP2S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP2S").finish()
    }
}
#[doc = "GPIO Port 1"]
pub use self::global_p2_ns as global_p2_s;
#[doc = "Control access port 0"]
pub type GlobalCtrlapNs = crate::Periph<global_ctrlap_ns::RegisterBlock, 0x4005_2000>;
impl core::fmt::Debug for GlobalCtrlapNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCtrlapNs").finish()
    }
}
#[doc = "Control access port 0"]
pub mod global_ctrlap_ns;
#[doc = "Control access port 1"]
pub type GlobalCtrlapS = crate::Periph<global_ctrlap_ns::RegisterBlock, 0x5005_2000>;
impl core::fmt::Debug for GlobalCtrlapS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCtrlapS").finish()
    }
}
#[doc = "Control access port 1"]
pub use self::global_ctrlap_ns as global_ctrlap_s;
#[doc = "Trace and debug control 0"]
pub type GlobalTadNs = crate::Periph<global_tad_ns::RegisterBlock, 0x4005_3000>;
impl core::fmt::Debug for GlobalTadNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTadNs").finish()
    }
}
#[doc = "Trace and debug control 0"]
pub mod global_tad_ns;
#[doc = "Trace and debug control 1"]
pub type GlobalTadS = crate::Periph<global_tad_ns::RegisterBlock, 0x5005_3000>;
impl core::fmt::Debug for GlobalTadS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTadS").finish()
    }
}
#[doc = "Trace and debug control 1"]
pub use self::global_tad_ns as global_tad_s;
#[doc = "Timer/Counter 0"]
pub type GlobalTimer00Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x4005_5000>;
impl core::fmt::Debug for GlobalTimer00Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer00Ns").finish()
    }
}
#[doc = "Timer/Counter 0"]
pub mod global_timer00_ns;
#[doc = "Timer/Counter 1"]
pub type GlobalTimer00S = crate::Periph<global_timer00_ns::RegisterBlock, 0x5005_5000>;
impl core::fmt::Debug for GlobalTimer00S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer00S").finish()
    }
}
#[doc = "Timer/Counter 1"]
pub use self::global_timer00_ns as global_timer00_s;
#[doc = "System protection unit 1"]
pub type GlobalSpu10S = crate::Periph<global_spu00_s::RegisterBlock, 0x5008_0000>;
impl core::fmt::Debug for GlobalSpu10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpu10S").finish()
    }
}
#[doc = "System protection unit 1"]
pub use self::global_spu00_s as global_spu10_s;
#[doc = "Distributed programmable peripheral interconnect controller 2"]
pub type GlobalDppic10Ns = crate::Periph<global_dppic00_ns::RegisterBlock, 0x4008_2000>;
impl core::fmt::Debug for GlobalDppic10Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic10Ns").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 2"]
pub use self::global_dppic00_ns as global_dppic10_ns;
#[doc = "Distributed programmable peripheral interconnect controller 3"]
pub type GlobalDppic10S = crate::Periph<global_dppic00_ns::RegisterBlock, 0x5008_2000>;
impl core::fmt::Debug for GlobalDppic10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic10S").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 3"]
pub use self::global_dppic00_ns as global_dppic10_s;
#[doc = "PPIB APB registers 4"]
pub type GlobalPpib10Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x4008_3000>;
impl core::fmt::Debug for GlobalPpib10Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib10Ns").finish()
    }
}
#[doc = "PPIB APB registers 4"]
pub use self::global_ppib00_ns as global_ppib10_ns;
#[doc = "PPIB APB registers 5"]
pub type GlobalPpib10S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x5008_3000>;
impl core::fmt::Debug for GlobalPpib10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib10S").finish()
    }
}
#[doc = "PPIB APB registers 5"]
pub use self::global_ppib00_ns as global_ppib10_s;
#[doc = "PPIB APB registers 6"]
pub type GlobalPpib11Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x4008_4000>;
impl core::fmt::Debug for GlobalPpib11Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib11Ns").finish()
    }
}
#[doc = "PPIB APB registers 6"]
pub use self::global_ppib00_ns as global_ppib11_ns;
#[doc = "PPIB APB registers 7"]
pub type GlobalPpib11S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x5008_4000>;
impl core::fmt::Debug for GlobalPpib11S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib11S").finish()
    }
}
#[doc = "PPIB APB registers 7"]
pub use self::global_ppib00_ns as global_ppib11_s;
#[doc = "Timer/Counter 2"]
pub type GlobalTimer10Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x4008_5000>;
impl core::fmt::Debug for GlobalTimer10Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer10Ns").finish()
    }
}
#[doc = "Timer/Counter 2"]
pub use self::global_timer00_ns as global_timer10_ns;
#[doc = "Timer/Counter 3"]
pub type GlobalTimer10S = crate::Periph<global_timer00_ns::RegisterBlock, 0x5008_5000>;
impl core::fmt::Debug for GlobalTimer10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer10S").finish()
    }
}
#[doc = "Timer/Counter 3"]
pub use self::global_timer00_ns as global_timer10_s;
#[doc = "Real-time counter 0"]
pub type GlobalRtc10Ns = crate::Periph<global_rtc10_ns::RegisterBlock, 0x4008_6000>;
impl core::fmt::Debug for GlobalRtc10Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRtc10Ns").finish()
    }
}
#[doc = "Real-time counter 0"]
pub mod global_rtc10_ns;
#[doc = "Real-time counter 1"]
pub type GlobalRtc10S = crate::Periph<global_rtc10_ns::RegisterBlock, 0x5008_6000>;
impl core::fmt::Debug for GlobalRtc10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRtc10S").finish()
    }
}
#[doc = "Real-time counter 1"]
pub use self::global_rtc10_ns as global_rtc10_s;
#[doc = "Event generator unit 0"]
pub type GlobalEgu10Ns = crate::Periph<global_egu10_ns::RegisterBlock, 0x4008_7000>;
impl core::fmt::Debug for GlobalEgu10Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEgu10Ns").finish()
    }
}
#[doc = "Event generator unit 0"]
pub mod global_egu10_ns;
#[doc = "Event generator unit 1"]
pub type GlobalEgu10S = crate::Periph<global_egu10_ns::RegisterBlock, 0x5008_7000>;
impl core::fmt::Debug for GlobalEgu10S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEgu10S").finish()
    }
}
#[doc = "Event generator unit 1"]
pub use self::global_egu10_ns as global_egu10_s;
#[doc = "2.4 GHz radio 0"]
pub type GlobalRadioNs = crate::Periph<global_radio_ns::RegisterBlock, 0x4008_a000>;
impl core::fmt::Debug for GlobalRadioNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRadioNs").finish()
    }
}
#[doc = "2.4 GHz radio 0"]
pub mod global_radio_ns;
#[doc = "2.4 GHz radio 1"]
pub type GlobalRadioS = crate::Periph<global_radio_ns::RegisterBlock, 0x5008_a000>;
impl core::fmt::Debug for GlobalRadioS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRadioS").finish()
    }
}
#[doc = "2.4 GHz radio 1"]
pub use self::global_radio_ns as global_radio_s;
#[doc = "System protection unit 2"]
pub type GlobalSpu20S = crate::Periph<global_spu00_s::RegisterBlock, 0x500c_0000>;
impl core::fmt::Debug for GlobalSpu20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpu20S").finish()
    }
}
#[doc = "System protection unit 2"]
pub use self::global_spu00_s as global_spu20_s;
#[doc = "Distributed programmable peripheral interconnect controller 4"]
pub type GlobalDppic20Ns = crate::Periph<global_dppic00_ns::RegisterBlock, 0x400c_2000>;
impl core::fmt::Debug for GlobalDppic20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic20Ns").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 4"]
pub use self::global_dppic00_ns as global_dppic20_ns;
#[doc = "Distributed programmable peripheral interconnect controller 5"]
pub type GlobalDppic20S = crate::Periph<global_dppic00_ns::RegisterBlock, 0x500c_2000>;
impl core::fmt::Debug for GlobalDppic20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic20S").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 5"]
pub use self::global_dppic00_ns as global_dppic20_s;
#[doc = "PPIB APB registers 8"]
pub type GlobalPpib20Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x400c_3000>;
impl core::fmt::Debug for GlobalPpib20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib20Ns").finish()
    }
}
#[doc = "PPIB APB registers 8"]
pub use self::global_ppib00_ns as global_ppib20_ns;
#[doc = "PPIB APB registers 9"]
pub type GlobalPpib20S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x500c_3000>;
impl core::fmt::Debug for GlobalPpib20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib20S").finish()
    }
}
#[doc = "PPIB APB registers 9"]
pub use self::global_ppib00_ns as global_ppib20_s;
#[doc = "PPIB APB registers 10"]
pub type GlobalPpib21Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x400c_4000>;
impl core::fmt::Debug for GlobalPpib21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib21Ns").finish()
    }
}
#[doc = "PPIB APB registers 10"]
pub use self::global_ppib00_ns as global_ppib21_ns;
#[doc = "PPIB APB registers 11"]
pub type GlobalPpib21S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x500c_4000>;
impl core::fmt::Debug for GlobalPpib21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib21S").finish()
    }
}
#[doc = "PPIB APB registers 11"]
pub use self::global_ppib00_ns as global_ppib21_s;
#[doc = "PPIB APB registers 12"]
pub type GlobalPpib22Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x400c_5000>;
impl core::fmt::Debug for GlobalPpib22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib22Ns").finish()
    }
}
#[doc = "PPIB APB registers 12"]
pub use self::global_ppib00_ns as global_ppib22_ns;
#[doc = "PPIB APB registers 13"]
pub type GlobalPpib22S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x500c_5000>;
impl core::fmt::Debug for GlobalPpib22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib22S").finish()
    }
}
#[doc = "PPIB APB registers 13"]
pub use self::global_ppib00_ns as global_ppib22_s;
#[doc = "Serial Peripheral Interface Master with EasyDMA 2"]
pub type GlobalSpim20Ns = crate::Periph<global_spim00_ns::RegisterBlock, 0x400c_6000>;
impl core::fmt::Debug for GlobalSpim20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim20Ns").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 2"]
pub use self::global_spim00_ns as global_spim20_ns;
#[doc = "SPI Slave 2"]
pub type GlobalSpis20Ns = crate::Periph<global_spis00_ns::RegisterBlock, 0x400c_6000>;
impl core::fmt::Debug for GlobalSpis20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis20Ns").finish()
    }
}
#[doc = "SPI Slave 2"]
pub use self::global_spis00_ns as global_spis20_ns;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 0"]
pub type GlobalTwim20Ns = crate::Periph<global_twim20_ns::RegisterBlock, 0x400c_6000>;
impl core::fmt::Debug for GlobalTwim20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim20Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 0"]
pub mod global_twim20_ns;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 0"]
pub type GlobalTwis20Ns = crate::Periph<global_twis20_ns::RegisterBlock, 0x400c_6000>;
impl core::fmt::Debug for GlobalTwis20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis20Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 0"]
pub mod global_twis20_ns;
#[doc = "UART with EasyDMA 2"]
pub type GlobalUarte20Ns = crate::Periph<global_uarte00_ns::RegisterBlock, 0x400c_6000>;
impl core::fmt::Debug for GlobalUarte20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte20Ns").finish()
    }
}
#[doc = "UART with EasyDMA 2"]
pub use self::global_uarte00_ns as global_uarte20_ns;
#[doc = "Serial Peripheral Interface Master with EasyDMA 3"]
pub type GlobalSpim20S = crate::Periph<global_spim00_ns::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for GlobalSpim20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim20S").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 3"]
pub use self::global_spim00_ns as global_spim20_s;
#[doc = "SPI Slave 3"]
pub type GlobalSpis20S = crate::Periph<global_spis00_ns::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for GlobalSpis20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis20S").finish()
    }
}
#[doc = "SPI Slave 3"]
pub use self::global_spis00_ns as global_spis20_s;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 1"]
pub type GlobalTwim20S = crate::Periph<global_twim20_ns::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for GlobalTwim20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim20S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 1"]
pub use self::global_twim20_ns as global_twim20_s;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 1"]
pub type GlobalTwis20S = crate::Periph<global_twis20_ns::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for GlobalTwis20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis20S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 1"]
pub use self::global_twis20_ns as global_twis20_s;
#[doc = "UART with EasyDMA 3"]
pub type GlobalUarte20S = crate::Periph<global_uarte00_ns::RegisterBlock, 0x500c_6000>;
impl core::fmt::Debug for GlobalUarte20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte20S").finish()
    }
}
#[doc = "UART with EasyDMA 3"]
pub use self::global_uarte00_ns as global_uarte20_s;
#[doc = "Serial Peripheral Interface Master with EasyDMA 4"]
pub type GlobalSpim21Ns = crate::Periph<global_spim00_ns::RegisterBlock, 0x400c_7000>;
impl core::fmt::Debug for GlobalSpim21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim21Ns").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 4"]
pub use self::global_spim00_ns as global_spim21_ns;
#[doc = "SPI Slave 4"]
pub type GlobalSpis21Ns = crate::Periph<global_spis00_ns::RegisterBlock, 0x400c_7000>;
impl core::fmt::Debug for GlobalSpis21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis21Ns").finish()
    }
}
#[doc = "SPI Slave 4"]
pub use self::global_spis00_ns as global_spis21_ns;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 2"]
pub type GlobalTwim21Ns = crate::Periph<global_twim20_ns::RegisterBlock, 0x400c_7000>;
impl core::fmt::Debug for GlobalTwim21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim21Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 2"]
pub use self::global_twim20_ns as global_twim21_ns;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 2"]
pub type GlobalTwis21Ns = crate::Periph<global_twis20_ns::RegisterBlock, 0x400c_7000>;
impl core::fmt::Debug for GlobalTwis21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis21Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 2"]
pub use self::global_twis20_ns as global_twis21_ns;
#[doc = "UART with EasyDMA 4"]
pub type GlobalUarte21Ns = crate::Periph<global_uarte00_ns::RegisterBlock, 0x400c_7000>;
impl core::fmt::Debug for GlobalUarte21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte21Ns").finish()
    }
}
#[doc = "UART with EasyDMA 4"]
pub use self::global_uarte00_ns as global_uarte21_ns;
#[doc = "Serial Peripheral Interface Master with EasyDMA 5"]
pub type GlobalSpim21S = crate::Periph<global_spim00_ns::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for GlobalSpim21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim21S").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 5"]
pub use self::global_spim00_ns as global_spim21_s;
#[doc = "SPI Slave 5"]
pub type GlobalSpis21S = crate::Periph<global_spis00_ns::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for GlobalSpis21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis21S").finish()
    }
}
#[doc = "SPI Slave 5"]
pub use self::global_spis00_ns as global_spis21_s;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 3"]
pub type GlobalTwim21S = crate::Periph<global_twim20_ns::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for GlobalTwim21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim21S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 3"]
pub use self::global_twim20_ns as global_twim21_s;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 3"]
pub type GlobalTwis21S = crate::Periph<global_twis20_ns::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for GlobalTwis21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis21S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 3"]
pub use self::global_twis20_ns as global_twis21_s;
#[doc = "UART with EasyDMA 5"]
pub type GlobalUarte21S = crate::Periph<global_uarte00_ns::RegisterBlock, 0x500c_7000>;
impl core::fmt::Debug for GlobalUarte21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte21S").finish()
    }
}
#[doc = "UART with EasyDMA 5"]
pub use self::global_uarte00_ns as global_uarte21_s;
#[doc = "Serial Peripheral Interface Master with EasyDMA 6"]
pub type GlobalSpim22Ns = crate::Periph<global_spim00_ns::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for GlobalSpim22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim22Ns").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 6"]
pub use self::global_spim00_ns as global_spim22_ns;
#[doc = "SPI Slave 6"]
pub type GlobalSpis22Ns = crate::Periph<global_spis00_ns::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for GlobalSpis22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis22Ns").finish()
    }
}
#[doc = "SPI Slave 6"]
pub use self::global_spis00_ns as global_spis22_ns;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 4"]
pub type GlobalTwim22Ns = crate::Periph<global_twim20_ns::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for GlobalTwim22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim22Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 4"]
pub use self::global_twim20_ns as global_twim22_ns;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 4"]
pub type GlobalTwis22Ns = crate::Periph<global_twis20_ns::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for GlobalTwis22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis22Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 4"]
pub use self::global_twis20_ns as global_twis22_ns;
#[doc = "UART with EasyDMA 6"]
pub type GlobalUarte22Ns = crate::Periph<global_uarte00_ns::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for GlobalUarte22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte22Ns").finish()
    }
}
#[doc = "UART with EasyDMA 6"]
pub use self::global_uarte00_ns as global_uarte22_ns;
#[doc = "Serial Peripheral Interface Master with EasyDMA 7"]
pub type GlobalSpim22S = crate::Periph<global_spim00_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for GlobalSpim22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim22S").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 7"]
pub use self::global_spim00_ns as global_spim22_s;
#[doc = "SPI Slave 7"]
pub type GlobalSpis22S = crate::Periph<global_spis00_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for GlobalSpis22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis22S").finish()
    }
}
#[doc = "SPI Slave 7"]
pub use self::global_spis00_ns as global_spis22_s;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 5"]
pub type GlobalTwim22S = crate::Periph<global_twim20_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for GlobalTwim22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim22S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 5"]
pub use self::global_twim20_ns as global_twim22_s;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 5"]
pub type GlobalTwis22S = crate::Periph<global_twis20_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for GlobalTwis22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis22S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 5"]
pub use self::global_twis20_ns as global_twis22_s;
#[doc = "UART with EasyDMA 7"]
pub type GlobalUarte22S = crate::Periph<global_uarte00_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for GlobalUarte22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte22S").finish()
    }
}
#[doc = "UART with EasyDMA 7"]
pub use self::global_uarte00_ns as global_uarte22_s;
#[doc = "Event generator unit 2"]
pub type GlobalEgu20Ns = crate::Periph<global_egu10_ns::RegisterBlock, 0x400c_9000>;
impl core::fmt::Debug for GlobalEgu20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEgu20Ns").finish()
    }
}
#[doc = "Event generator unit 2"]
pub use self::global_egu10_ns as global_egu20_ns;
#[doc = "Event generator unit 3"]
pub type GlobalEgu20S = crate::Periph<global_egu10_ns::RegisterBlock, 0x500c_9000>;
impl core::fmt::Debug for GlobalEgu20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalEgu20S").finish()
    }
}
#[doc = "Event generator unit 3"]
pub use self::global_egu10_ns as global_egu20_s;
#[doc = "Timer/Counter 4"]
pub type GlobalTimer20Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x400c_a000>;
impl core::fmt::Debug for GlobalTimer20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer20Ns").finish()
    }
}
#[doc = "Timer/Counter 4"]
pub use self::global_timer00_ns as global_timer20_ns;
#[doc = "Timer/Counter 5"]
pub type GlobalTimer20S = crate::Periph<global_timer00_ns::RegisterBlock, 0x500c_a000>;
impl core::fmt::Debug for GlobalTimer20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer20S").finish()
    }
}
#[doc = "Timer/Counter 5"]
pub use self::global_timer00_ns as global_timer20_s;
#[doc = "Timer/Counter 6"]
pub type GlobalTimer21Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x400c_b000>;
impl core::fmt::Debug for GlobalTimer21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer21Ns").finish()
    }
}
#[doc = "Timer/Counter 6"]
pub use self::global_timer00_ns as global_timer21_ns;
#[doc = "Timer/Counter 7"]
pub type GlobalTimer21S = crate::Periph<global_timer00_ns::RegisterBlock, 0x500c_b000>;
impl core::fmt::Debug for GlobalTimer21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer21S").finish()
    }
}
#[doc = "Timer/Counter 7"]
pub use self::global_timer00_ns as global_timer21_s;
#[doc = "Timer/Counter 8"]
pub type GlobalTimer22Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x400c_c000>;
impl core::fmt::Debug for GlobalTimer22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer22Ns").finish()
    }
}
#[doc = "Timer/Counter 8"]
pub use self::global_timer00_ns as global_timer22_ns;
#[doc = "Timer/Counter 9"]
pub type GlobalTimer22S = crate::Periph<global_timer00_ns::RegisterBlock, 0x500c_c000>;
impl core::fmt::Debug for GlobalTimer22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer22S").finish()
    }
}
#[doc = "Timer/Counter 9"]
pub use self::global_timer00_ns as global_timer22_s;
#[doc = "Timer/Counter 10"]
pub type GlobalTimer23Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x400c_d000>;
impl core::fmt::Debug for GlobalTimer23Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer23Ns").finish()
    }
}
#[doc = "Timer/Counter 10"]
pub use self::global_timer00_ns as global_timer23_ns;
#[doc = "Timer/Counter 11"]
pub type GlobalTimer23S = crate::Periph<global_timer00_ns::RegisterBlock, 0x500c_d000>;
impl core::fmt::Debug for GlobalTimer23S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer23S").finish()
    }
}
#[doc = "Timer/Counter 11"]
pub use self::global_timer00_ns as global_timer23_s;
#[doc = "Timer/Counter 12"]
pub type GlobalTimer24Ns = crate::Periph<global_timer00_ns::RegisterBlock, 0x400c_e000>;
impl core::fmt::Debug for GlobalTimer24Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer24Ns").finish()
    }
}
#[doc = "Timer/Counter 12"]
pub use self::global_timer00_ns as global_timer24_ns;
#[doc = "Timer/Counter 13"]
pub type GlobalTimer24S = crate::Periph<global_timer00_ns::RegisterBlock, 0x500c_e000>;
impl core::fmt::Debug for GlobalTimer24S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTimer24S").finish()
    }
}
#[doc = "Timer/Counter 13"]
pub use self::global_timer00_ns as global_timer24_s;
#[doc = "Memory configuration 0"]
pub type GlobalMemconfNs = crate::Periph<global_memconf_ns::RegisterBlock, 0x400c_f000>;
impl core::fmt::Debug for GlobalMemconfNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalMemconfNs").finish()
    }
}
#[doc = "Memory configuration 0"]
pub mod global_memconf_ns;
#[doc = "Memory configuration 1"]
pub type GlobalMemconfS = crate::Periph<global_memconf_ns::RegisterBlock, 0x500c_f000>;
impl core::fmt::Debug for GlobalMemconfS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalMemconfS").finish()
    }
}
#[doc = "Memory configuration 1"]
pub use self::global_memconf_ns as global_memconf_s;
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 0"]
pub type GlobalPdm20Ns = crate::Periph<global_pdm20_ns::RegisterBlock, 0x400d_0000>;
impl core::fmt::Debug for GlobalPdm20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPdm20Ns").finish()
    }
}
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 0"]
pub mod global_pdm20_ns;
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 1"]
pub type GlobalPdm20S = crate::Periph<global_pdm20_ns::RegisterBlock, 0x500d_0000>;
impl core::fmt::Debug for GlobalPdm20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPdm20S").finish()
    }
}
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 1"]
pub use self::global_pdm20_ns as global_pdm20_s;
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 2"]
pub type GlobalPdm21Ns = crate::Periph<global_pdm20_ns::RegisterBlock, 0x400d_1000>;
impl core::fmt::Debug for GlobalPdm21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPdm21Ns").finish()
    }
}
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 2"]
pub use self::global_pdm20_ns as global_pdm21_ns;
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 3"]
pub type GlobalPdm21S = crate::Periph<global_pdm20_ns::RegisterBlock, 0x500d_1000>;
impl core::fmt::Debug for GlobalPdm21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPdm21S").finish()
    }
}
#[doc = "Pulse Density Modulation (Digital Microphone) Interface 3"]
pub use self::global_pdm20_ns as global_pdm21_s;
#[doc = "Pulse width modulation unit 0"]
pub type GlobalPwm20Ns = crate::Periph<global_pwm20_ns::RegisterBlock, 0x400d_2000>;
impl core::fmt::Debug for GlobalPwm20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm20Ns").finish()
    }
}
#[doc = "Pulse width modulation unit 0"]
pub mod global_pwm20_ns;
#[doc = "Pulse width modulation unit 1"]
pub type GlobalPwm20S = crate::Periph<global_pwm20_ns::RegisterBlock, 0x500d_2000>;
impl core::fmt::Debug for GlobalPwm20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm20S").finish()
    }
}
#[doc = "Pulse width modulation unit 1"]
pub use self::global_pwm20_ns as global_pwm20_s;
#[doc = "Pulse width modulation unit 2"]
pub type GlobalPwm21Ns = crate::Periph<global_pwm20_ns::RegisterBlock, 0x400d_3000>;
impl core::fmt::Debug for GlobalPwm21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm21Ns").finish()
    }
}
#[doc = "Pulse width modulation unit 2"]
pub use self::global_pwm20_ns as global_pwm21_ns;
#[doc = "Pulse width modulation unit 3"]
pub type GlobalPwm21S = crate::Periph<global_pwm20_ns::RegisterBlock, 0x500d_3000>;
impl core::fmt::Debug for GlobalPwm21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm21S").finish()
    }
}
#[doc = "Pulse width modulation unit 3"]
pub use self::global_pwm20_ns as global_pwm21_s;
#[doc = "Pulse width modulation unit 4"]
pub type GlobalPwm22Ns = crate::Periph<global_pwm20_ns::RegisterBlock, 0x400d_4000>;
impl core::fmt::Debug for GlobalPwm22Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm22Ns").finish()
    }
}
#[doc = "Pulse width modulation unit 4"]
pub use self::global_pwm20_ns as global_pwm22_ns;
#[doc = "Pulse width modulation unit 5"]
pub type GlobalPwm22S = crate::Periph<global_pwm20_ns::RegisterBlock, 0x500d_4000>;
impl core::fmt::Debug for GlobalPwm22S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPwm22S").finish()
    }
}
#[doc = "Pulse width modulation unit 5"]
pub use self::global_pwm20_ns as global_pwm22_s;
#[doc = "Analog to Digital Converter 0"]
pub type GlobalSaadcNs = crate::Periph<global_saadc_ns::RegisterBlock, 0x400d_5000>;
impl core::fmt::Debug for GlobalSaadcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSaadcNs").finish()
    }
}
#[doc = "Analog to Digital Converter 0"]
pub mod global_saadc_ns;
#[doc = "Analog to Digital Converter 1"]
pub type GlobalSaadcS = crate::Periph<global_saadc_ns::RegisterBlock, 0x500d_5000>;
impl core::fmt::Debug for GlobalSaadcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSaadcS").finish()
    }
}
#[doc = "Analog to Digital Converter 1"]
pub use self::global_saadc_ns as global_saadc_s;
#[doc = "NFC-A compatible radio NFC-A compatible radio 0"]
pub type GlobalNfctNs = crate::Periph<global_nfct_ns::RegisterBlock, 0x400d_6000>;
impl core::fmt::Debug for GlobalNfctNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalNfctNs").finish()
    }
}
#[doc = "NFC-A compatible radio NFC-A compatible radio 0"]
pub mod global_nfct_ns;
#[doc = "NFC-A compatible radio NFC-A compatible radio 1"]
pub type GlobalNfctS = crate::Periph<global_nfct_ns::RegisterBlock, 0x500d_6000>;
impl core::fmt::Debug for GlobalNfctS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalNfctS").finish()
    }
}
#[doc = "NFC-A compatible radio NFC-A compatible radio 1"]
pub use self::global_nfct_ns as global_nfct_s;
#[doc = "Temperature Sensor 0"]
pub type GlobalTempNs = crate::Periph<global_temp_ns::RegisterBlock, 0x400d_7000>;
impl core::fmt::Debug for GlobalTempNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTempNs").finish()
    }
}
#[doc = "Temperature Sensor 0"]
pub mod global_temp_ns;
#[doc = "Temperature Sensor 1"]
pub type GlobalTempS = crate::Periph<global_temp_ns::RegisterBlock, 0x500d_7000>;
impl core::fmt::Debug for GlobalTempS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTempS").finish()
    }
}
#[doc = "Temperature Sensor 1"]
pub use self::global_temp_ns as global_temp_s;
#[doc = "GPIO Port 2"]
pub type GlobalP1Ns = crate::Periph<global_p2_ns::RegisterBlock, 0x400d_8200>;
impl core::fmt::Debug for GlobalP1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP1Ns").finish()
    }
}
#[doc = "GPIO Port 2"]
pub use self::global_p2_ns as global_p1_ns;
#[doc = "GPIO Port 3"]
pub type GlobalP1S = crate::Periph<global_p2_ns::RegisterBlock, 0x500d_8200>;
impl core::fmt::Debug for GlobalP1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP1S").finish()
    }
}
#[doc = "GPIO Port 3"]
pub use self::global_p2_ns as global_p1_s;
#[doc = "GPIO Tasks and Events 0"]
pub type GlobalGpiote20Ns = crate::Periph<global_gpiote20_ns::RegisterBlock, 0x400d_a000>;
impl core::fmt::Debug for GlobalGpiote20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGpiote20Ns").finish()
    }
}
#[doc = "GPIO Tasks and Events 0"]
pub mod global_gpiote20_ns;
#[doc = "GPIO Tasks and Events 1"]
pub type GlobalGpiote20S = crate::Periph<global_gpiote20_ns::RegisterBlock, 0x500d_a000>;
impl core::fmt::Debug for GlobalGpiote20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGpiote20S").finish()
    }
}
#[doc = "GPIO Tasks and Events 1"]
pub use self::global_gpiote20_ns as global_gpiote20_s;
#[doc = "Tamper controller"]
pub type GlobalTampcS = crate::Periph<global_tampc_s::RegisterBlock, 0x500d_c000>;
impl core::fmt::Debug for GlobalTampcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTampcS").finish()
    }
}
#[doc = "Tamper controller"]
pub mod global_tampc_s;
#[doc = "Inter-IC Sound 0"]
pub type GlobalI2s20Ns = crate::Periph<global_i2s20_ns::RegisterBlock, 0x400d_d000>;
impl core::fmt::Debug for GlobalI2s20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalI2s20Ns").finish()
    }
}
#[doc = "Inter-IC Sound 0"]
pub mod global_i2s20_ns;
#[doc = "Inter-IC Sound 1"]
pub type GlobalI2s20S = crate::Periph<global_i2s20_ns::RegisterBlock, 0x500d_d000>;
impl core::fmt::Debug for GlobalI2s20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalI2s20S").finish()
    }
}
#[doc = "Inter-IC Sound 1"]
pub use self::global_i2s20_ns as global_i2s20_s;
#[doc = "Quadrature Decoder 0"]
pub type GlobalQdec20Ns = crate::Periph<global_qdec20_ns::RegisterBlock, 0x400e_0000>;
impl core::fmt::Debug for GlobalQdec20Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalQdec20Ns").finish()
    }
}
#[doc = "Quadrature Decoder 0"]
pub mod global_qdec20_ns;
#[doc = "Quadrature Decoder 1"]
pub type GlobalQdec20S = crate::Periph<global_qdec20_ns::RegisterBlock, 0x500e_0000>;
impl core::fmt::Debug for GlobalQdec20S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalQdec20S").finish()
    }
}
#[doc = "Quadrature Decoder 1"]
pub use self::global_qdec20_ns as global_qdec20_s;
#[doc = "Quadrature Decoder 2"]
pub type GlobalQdec21Ns = crate::Periph<global_qdec20_ns::RegisterBlock, 0x400e_1000>;
impl core::fmt::Debug for GlobalQdec21Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalQdec21Ns").finish()
    }
}
#[doc = "Quadrature Decoder 2"]
pub use self::global_qdec20_ns as global_qdec21_ns;
#[doc = "Quadrature Decoder 3"]
pub type GlobalQdec21S = crate::Periph<global_qdec20_ns::RegisterBlock, 0x500e_1000>;
impl core::fmt::Debug for GlobalQdec21S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalQdec21S").finish()
    }
}
#[doc = "Quadrature Decoder 3"]
pub use self::global_qdec20_ns as global_qdec21_s;
#[doc = "Global Real-time counter 0"]
pub type GlobalGrtcNs = crate::Periph<global_grtc_ns::RegisterBlock, 0x400e_2000>;
impl core::fmt::Debug for GlobalGrtcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGrtcNs").finish()
    }
}
#[doc = "Global Real-time counter 0"]
pub mod global_grtc_ns;
#[doc = "Global Real-time counter 1"]
pub type GlobalGrtcS = crate::Periph<global_grtc_ns::RegisterBlock, 0x500e_2000>;
impl core::fmt::Debug for GlobalGrtcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGrtcS").finish()
    }
}
#[doc = "Global Real-time counter 1"]
pub use self::global_grtc_ns as global_grtc_s;
#[doc = "System protection unit 3"]
pub type GlobalSpu30S = crate::Periph<global_spu00_s::RegisterBlock, 0x5010_0000>;
impl core::fmt::Debug for GlobalSpu30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpu30S").finish()
    }
}
#[doc = "System protection unit 3"]
pub use self::global_spu00_s as global_spu30_s;
#[doc = "Distributed programmable peripheral interconnect controller 6"]
pub type GlobalDppic30Ns = crate::Periph<global_dppic00_ns::RegisterBlock, 0x4010_2000>;
impl core::fmt::Debug for GlobalDppic30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic30Ns").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 6"]
pub use self::global_dppic00_ns as global_dppic30_ns;
#[doc = "Distributed programmable peripheral interconnect controller 7"]
pub type GlobalDppic30S = crate::Periph<global_dppic00_ns::RegisterBlock, 0x5010_2000>;
impl core::fmt::Debug for GlobalDppic30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalDppic30S").finish()
    }
}
#[doc = "Distributed programmable peripheral interconnect controller 7"]
pub use self::global_dppic00_ns as global_dppic30_s;
#[doc = "PPIB APB registers 14"]
pub type GlobalPpib30Ns = crate::Periph<global_ppib00_ns::RegisterBlock, 0x4010_3000>;
impl core::fmt::Debug for GlobalPpib30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib30Ns").finish()
    }
}
#[doc = "PPIB APB registers 14"]
pub use self::global_ppib00_ns as global_ppib30_ns;
#[doc = "PPIB APB registers 15"]
pub type GlobalPpib30S = crate::Periph<global_ppib00_ns::RegisterBlock, 0x5010_3000>;
impl core::fmt::Debug for GlobalPpib30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPpib30S").finish()
    }
}
#[doc = "PPIB APB registers 15"]
pub use self::global_ppib00_ns as global_ppib30_s;
#[doc = "Serial Peripheral Interface Master with EasyDMA 8"]
pub type GlobalSpim30Ns = crate::Periph<global_spim00_ns::RegisterBlock, 0x4010_4000>;
impl core::fmt::Debug for GlobalSpim30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim30Ns").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 8"]
pub use self::global_spim00_ns as global_spim30_ns;
#[doc = "SPI Slave 8"]
pub type GlobalSpis30Ns = crate::Periph<global_spis00_ns::RegisterBlock, 0x4010_4000>;
impl core::fmt::Debug for GlobalSpis30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis30Ns").finish()
    }
}
#[doc = "SPI Slave 8"]
pub use self::global_spis00_ns as global_spis30_ns;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 6"]
pub type GlobalTwim30Ns = crate::Periph<global_twim20_ns::RegisterBlock, 0x4010_4000>;
impl core::fmt::Debug for GlobalTwim30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim30Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 6"]
pub use self::global_twim20_ns as global_twim30_ns;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 6"]
pub type GlobalTwis30Ns = crate::Periph<global_twis20_ns::RegisterBlock, 0x4010_4000>;
impl core::fmt::Debug for GlobalTwis30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis30Ns").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 6"]
pub use self::global_twis20_ns as global_twis30_ns;
#[doc = "UART with EasyDMA 8"]
pub type GlobalUarte30Ns = crate::Periph<global_uarte00_ns::RegisterBlock, 0x4010_4000>;
impl core::fmt::Debug for GlobalUarte30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte30Ns").finish()
    }
}
#[doc = "UART with EasyDMA 8"]
pub use self::global_uarte00_ns as global_uarte30_ns;
#[doc = "Serial Peripheral Interface Master with EasyDMA 9"]
pub type GlobalSpim30S = crate::Periph<global_spim00_ns::RegisterBlock, 0x5010_4000>;
impl core::fmt::Debug for GlobalSpim30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpim30S").finish()
    }
}
#[doc = "Serial Peripheral Interface Master with EasyDMA 9"]
pub use self::global_spim00_ns as global_spim30_s;
#[doc = "SPI Slave 9"]
pub type GlobalSpis30S = crate::Periph<global_spis00_ns::RegisterBlock, 0x5010_4000>;
impl core::fmt::Debug for GlobalSpis30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalSpis30S").finish()
    }
}
#[doc = "SPI Slave 9"]
pub use self::global_spis00_ns as global_spis30_s;
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 7"]
pub type GlobalTwim30S = crate::Periph<global_twim20_ns::RegisterBlock, 0x5010_4000>;
impl core::fmt::Debug for GlobalTwim30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwim30S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Master Interface with EasyDMA 7"]
pub use self::global_twim20_ns as global_twim30_s;
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 7"]
pub type GlobalTwis30S = crate::Periph<global_twis20_ns::RegisterBlock, 0x5010_4000>;
impl core::fmt::Debug for GlobalTwis30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalTwis30S").finish()
    }
}
#[doc = "I2C compatible Two-Wire Slave Interface with EasyDMA 7"]
pub use self::global_twis20_ns as global_twis30_s;
#[doc = "UART with EasyDMA 9"]
pub type GlobalUarte30S = crate::Periph<global_uarte00_ns::RegisterBlock, 0x5010_4000>;
impl core::fmt::Debug for GlobalUarte30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalUarte30S").finish()
    }
}
#[doc = "UART with EasyDMA 9"]
pub use self::global_uarte00_ns as global_uarte30_s;
#[doc = "Real-time counter 2"]
pub type GlobalRtc30Ns = crate::Periph<global_rtc10_ns::RegisterBlock, 0x4010_5000>;
impl core::fmt::Debug for GlobalRtc30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRtc30Ns").finish()
    }
}
#[doc = "Real-time counter 2"]
pub use self::global_rtc10_ns as global_rtc30_ns;
#[doc = "Real-time counter 3"]
pub type GlobalRtc30S = crate::Periph<global_rtc10_ns::RegisterBlock, 0x5010_5000>;
impl core::fmt::Debug for GlobalRtc30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRtc30S").finish()
    }
}
#[doc = "Real-time counter 3"]
pub use self::global_rtc10_ns as global_rtc30_s;
#[doc = "Comparator 0"]
pub type GlobalCompNs = crate::Periph<global_comp_ns::RegisterBlock, 0x4010_6000>;
impl core::fmt::Debug for GlobalCompNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCompNs").finish()
    }
}
#[doc = "Comparator 0"]
pub mod global_comp_ns;
#[doc = "Low-power comparator 0"]
pub type GlobalLpcompNs = crate::Periph<global_lpcomp_ns::RegisterBlock, 0x4010_6000>;
impl core::fmt::Debug for GlobalLpcompNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalLpcompNs").finish()
    }
}
#[doc = "Low-power comparator 0"]
pub mod global_lpcomp_ns;
#[doc = "Comparator 1"]
pub type GlobalCompS = crate::Periph<global_comp_ns::RegisterBlock, 0x5010_6000>;
impl core::fmt::Debug for GlobalCompS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalCompS").finish()
    }
}
#[doc = "Comparator 1"]
pub use self::global_comp_ns as global_comp_s;
#[doc = "Low-power comparator 1"]
pub type GlobalLpcompS = crate::Periph<global_lpcomp_ns::RegisterBlock, 0x5010_6000>;
impl core::fmt::Debug for GlobalLpcompS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalLpcompS").finish()
    }
}
#[doc = "Low-power comparator 1"]
pub use self::global_lpcomp_ns as global_lpcomp_s;
#[doc = "Watchdog Timer 0"]
pub type GlobalWdt30S = crate::Periph<global_wdt30_s::RegisterBlock, 0x5010_8000>;
impl core::fmt::Debug for GlobalWdt30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalWdt30S").finish()
    }
}
#[doc = "Watchdog Timer 0"]
pub mod global_wdt30_s;
#[doc = "Watchdog Timer 1"]
pub type GlobalWdt31Ns = crate::Periph<global_wdt30_s::RegisterBlock, 0x4010_9000>;
impl core::fmt::Debug for GlobalWdt31Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalWdt31Ns").finish()
    }
}
#[doc = "Watchdog Timer 1"]
pub use self::global_wdt30_s as global_wdt31_ns;
#[doc = "Watchdog Timer 2"]
pub type GlobalWdt31S = crate::Periph<global_wdt30_s::RegisterBlock, 0x5010_9000>;
impl core::fmt::Debug for GlobalWdt31S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalWdt31S").finish()
    }
}
#[doc = "Watchdog Timer 2"]
pub use self::global_wdt30_s as global_wdt31_s;
#[doc = "GPIO Port 4"]
pub type GlobalP0Ns = crate::Periph<global_p2_ns::RegisterBlock, 0x4010_a000>;
impl core::fmt::Debug for GlobalP0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP0Ns").finish()
    }
}
#[doc = "GPIO Port 4"]
pub use self::global_p2_ns as global_p0_ns;
#[doc = "GPIO Port 5"]
pub type GlobalP0S = crate::Periph<global_p2_ns::RegisterBlock, 0x5010_a000>;
impl core::fmt::Debug for GlobalP0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalP0S").finish()
    }
}
#[doc = "GPIO Port 5"]
pub use self::global_p2_ns as global_p0_s;
#[doc = "GPIO Tasks and Events 2"]
pub type GlobalGpiote30Ns = crate::Periph<global_gpiote20_ns::RegisterBlock, 0x4010_c000>;
impl core::fmt::Debug for GlobalGpiote30Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGpiote30Ns").finish()
    }
}
#[doc = "GPIO Tasks and Events 2"]
pub use self::global_gpiote20_ns as global_gpiote30_ns;
#[doc = "GPIO Tasks and Events 3"]
pub type GlobalGpiote30S = crate::Periph<global_gpiote20_ns::RegisterBlock, 0x5010_c000>;
impl core::fmt::Debug for GlobalGpiote30S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalGpiote30S").finish()
    }
}
#[doc = "GPIO Tasks and Events 3"]
pub use self::global_gpiote20_ns as global_gpiote30_s;
#[doc = "Clock management 0"]
pub type GlobalClockNs = crate::Periph<global_clock_ns::RegisterBlock, 0x4010_e000>;
impl core::fmt::Debug for GlobalClockNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalClockNs").finish()
    }
}
#[doc = "Clock management 0"]
pub mod global_clock_ns;
#[doc = "Power control 0"]
pub type GlobalPowerNs = crate::Periph<global_power_ns::RegisterBlock, 0x4010_e000>;
impl core::fmt::Debug for GlobalPowerNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPowerNs").finish()
    }
}
#[doc = "Power control 0"]
pub mod global_power_ns;
#[doc = "Reset control 0"]
pub type GlobalResetNs = crate::Periph<global_reset_ns::RegisterBlock, 0x4010_e000>;
impl core::fmt::Debug for GlobalResetNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalResetNs").finish()
    }
}
#[doc = "Reset control 0"]
pub mod global_reset_ns;
#[doc = "Clock management 1"]
pub type GlobalClockS = crate::Periph<global_clock_ns::RegisterBlock, 0x5010_e000>;
impl core::fmt::Debug for GlobalClockS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalClockS").finish()
    }
}
#[doc = "Clock management 1"]
pub use self::global_clock_ns as global_clock_s;
#[doc = "Power control 1"]
pub type GlobalPowerS = crate::Periph<global_power_ns::RegisterBlock, 0x5010_e000>;
impl core::fmt::Debug for GlobalPowerS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalPowerS").finish()
    }
}
#[doc = "Power control 1"]
pub use self::global_power_ns as global_power_s;
#[doc = "Reset control 1"]
pub type GlobalResetS = crate::Periph<global_reset_ns::RegisterBlock, 0x5010_e000>;
impl core::fmt::Debug for GlobalResetS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalResetS").finish()
    }
}
#[doc = "Reset control 1"]
pub use self::global_reset_ns as global_reset_s;
#[doc = "Oscillator control 0"]
pub type GlobalOscillatorsNs = crate::Periph<global_oscillators_ns::RegisterBlock, 0x4012_0000>;
impl core::fmt::Debug for GlobalOscillatorsNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalOscillatorsNs").finish()
    }
}
#[doc = "Oscillator control 0"]
pub mod global_oscillators_ns;
#[doc = "Voltage regulators 0"]
pub type GlobalRegulatorsNs = crate::Periph<global_regulators_ns::RegisterBlock, 0x4012_0000>;
impl core::fmt::Debug for GlobalRegulatorsNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRegulatorsNs").finish()
    }
}
#[doc = "Voltage regulators 0"]
pub mod global_regulators_ns;
#[doc = "Oscillator control 1"]
pub type GlobalOscillatorsS = crate::Periph<global_oscillators_ns::RegisterBlock, 0x5012_0000>;
impl core::fmt::Debug for GlobalOscillatorsS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalOscillatorsS").finish()
    }
}
#[doc = "Oscillator control 1"]
pub use self::global_oscillators_ns as global_oscillators_s;
#[doc = "Voltage regulators 1"]
pub type GlobalRegulatorsS = crate::Periph<global_regulators_ns::RegisterBlock, 0x5012_0000>;
impl core::fmt::Debug for GlobalRegulatorsS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GlobalRegulatorsS").finish()
    }
}
#[doc = "Voltage regulators 1"]
pub use self::global_regulators_ns as global_regulators_s;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "GLOBAL_FICR_NS"]
    pub global_ficr_ns: GlobalFicrNs,
    #[doc = "GLOBAL_UICR_S"]
    pub global_uicr_s: GlobalUicrS,
    #[doc = "GLOBAL_SICR_S"]
    pub global_sicr_s: GlobalSicrS,
    #[doc = "GLOBAL_CRACENCORE_S"]
    pub global_cracencore_s: GlobalCracencoreS,
    #[doc = "VPRCLIC_NS"]
    pub vprclic_ns: VprclicNs,
    #[doc = "GLOBAL_SPU00_S"]
    pub global_spu00_s: GlobalSpu00S,
    #[doc = "GLOBAL_MPC00_S"]
    pub global_mpc00_s: GlobalMpc00S,
    #[doc = "GLOBAL_DPPIC00_NS"]
    pub global_dppic00_ns: GlobalDppic00Ns,
    #[doc = "GLOBAL_DPPIC00_S"]
    pub global_dppic00_s: GlobalDppic00S,
    #[doc = "GLOBAL_PPIB00_NS"]
    pub global_ppib00_ns: GlobalPpib00Ns,
    #[doc = "GLOBAL_PPIB00_S"]
    pub global_ppib00_s: GlobalPpib00S,
    #[doc = "GLOBAL_PPIB01_NS"]
    pub global_ppib01_ns: GlobalPpib01Ns,
    #[doc = "GLOBAL_PPIB01_S"]
    pub global_ppib01_s: GlobalPpib01S,
    #[doc = "GLOBAL_KMU_S"]
    pub global_kmu_s: GlobalKmuS,
    #[doc = "GLOBAL_AAR00_NS"]
    pub global_aar00_ns: GlobalAar00Ns,
    #[doc = "GLOBAL_CCM00_NS"]
    pub global_ccm00_ns: GlobalCcm00Ns,
    #[doc = "GLOBAL_AAR00_S"]
    pub global_aar00_s: GlobalAar00S,
    #[doc = "GLOBAL_CCM00_S"]
    pub global_ccm00_s: GlobalCcm00S,
    #[doc = "GLOBAL_ECB00_NS"]
    pub global_ecb00_ns: GlobalEcb00Ns,
    #[doc = "GLOBAL_ECB00_S"]
    pub global_ecb00_s: GlobalEcb00S,
    #[doc = "GLOBAL_CRACEN_S"]
    pub global_cracen_s: GlobalCracenS,
    #[doc = "GLOBAL_SPIM00_NS"]
    pub global_spim00_ns: GlobalSpim00Ns,
    #[doc = "GLOBAL_SPIS00_NS"]
    pub global_spis00_ns: GlobalSpis00Ns,
    #[doc = "GLOBAL_UARTE00_NS"]
    pub global_uarte00_ns: GlobalUarte00Ns,
    #[doc = "GLOBAL_SPIM00_S"]
    pub global_spim00_s: GlobalSpim00S,
    #[doc = "GLOBAL_SPIS00_S"]
    pub global_spis00_s: GlobalSpis00S,
    #[doc = "GLOBAL_UARTE00_S"]
    pub global_uarte00_s: GlobalUarte00S,
    #[doc = "GLOBAL_GLITCHDET_S"]
    pub global_glitchdet_s: GlobalGlitchdetS,
    #[doc = "GLOBAL_RRAMC_S"]
    pub global_rramc_s: GlobalRramcS,
    #[doc = "GLOBAL_VPR00_NS"]
    pub global_vpr00_ns: GlobalVpr00Ns,
    #[doc = "GLOBAL_VPR00_S"]
    pub global_vpr00_s: GlobalVpr00S,
    #[doc = "GLOBAL_P2_NS"]
    pub global_p2_ns: GlobalP2Ns,
    #[doc = "GLOBAL_P2_S"]
    pub global_p2_s: GlobalP2S,
    #[doc = "GLOBAL_CTRLAP_NS"]
    pub global_ctrlap_ns: GlobalCtrlapNs,
    #[doc = "GLOBAL_CTRLAP_S"]
    pub global_ctrlap_s: GlobalCtrlapS,
    #[doc = "GLOBAL_TAD_NS"]
    pub global_tad_ns: GlobalTadNs,
    #[doc = "GLOBAL_TAD_S"]
    pub global_tad_s: GlobalTadS,
    #[doc = "GLOBAL_TIMER00_NS"]
    pub global_timer00_ns: GlobalTimer00Ns,
    #[doc = "GLOBAL_TIMER00_S"]
    pub global_timer00_s: GlobalTimer00S,
    #[doc = "GLOBAL_SPU10_S"]
    pub global_spu10_s: GlobalSpu10S,
    #[doc = "GLOBAL_DPPIC10_NS"]
    pub global_dppic10_ns: GlobalDppic10Ns,
    #[doc = "GLOBAL_DPPIC10_S"]
    pub global_dppic10_s: GlobalDppic10S,
    #[doc = "GLOBAL_PPIB10_NS"]
    pub global_ppib10_ns: GlobalPpib10Ns,
    #[doc = "GLOBAL_PPIB10_S"]
    pub global_ppib10_s: GlobalPpib10S,
    #[doc = "GLOBAL_PPIB11_NS"]
    pub global_ppib11_ns: GlobalPpib11Ns,
    #[doc = "GLOBAL_PPIB11_S"]
    pub global_ppib11_s: GlobalPpib11S,
    #[doc = "GLOBAL_TIMER10_NS"]
    pub global_timer10_ns: GlobalTimer10Ns,
    #[doc = "GLOBAL_TIMER10_S"]
    pub global_timer10_s: GlobalTimer10S,
    #[doc = "GLOBAL_RTC10_NS"]
    pub global_rtc10_ns: GlobalRtc10Ns,
    #[doc = "GLOBAL_RTC10_S"]
    pub global_rtc10_s: GlobalRtc10S,
    #[doc = "GLOBAL_EGU10_NS"]
    pub global_egu10_ns: GlobalEgu10Ns,
    #[doc = "GLOBAL_EGU10_S"]
    pub global_egu10_s: GlobalEgu10S,
    #[doc = "GLOBAL_RADIO_NS"]
    pub global_radio_ns: GlobalRadioNs,
    #[doc = "GLOBAL_RADIO_S"]
    pub global_radio_s: GlobalRadioS,
    #[doc = "GLOBAL_SPU20_S"]
    pub global_spu20_s: GlobalSpu20S,
    #[doc = "GLOBAL_DPPIC20_NS"]
    pub global_dppic20_ns: GlobalDppic20Ns,
    #[doc = "GLOBAL_DPPIC20_S"]
    pub global_dppic20_s: GlobalDppic20S,
    #[doc = "GLOBAL_PPIB20_NS"]
    pub global_ppib20_ns: GlobalPpib20Ns,
    #[doc = "GLOBAL_PPIB20_S"]
    pub global_ppib20_s: GlobalPpib20S,
    #[doc = "GLOBAL_PPIB21_NS"]
    pub global_ppib21_ns: GlobalPpib21Ns,
    #[doc = "GLOBAL_PPIB21_S"]
    pub global_ppib21_s: GlobalPpib21S,
    #[doc = "GLOBAL_PPIB22_NS"]
    pub global_ppib22_ns: GlobalPpib22Ns,
    #[doc = "GLOBAL_PPIB22_S"]
    pub global_ppib22_s: GlobalPpib22S,
    #[doc = "GLOBAL_SPIM20_NS"]
    pub global_spim20_ns: GlobalSpim20Ns,
    #[doc = "GLOBAL_SPIS20_NS"]
    pub global_spis20_ns: GlobalSpis20Ns,
    #[doc = "GLOBAL_TWIM20_NS"]
    pub global_twim20_ns: GlobalTwim20Ns,
    #[doc = "GLOBAL_TWIS20_NS"]
    pub global_twis20_ns: GlobalTwis20Ns,
    #[doc = "GLOBAL_UARTE20_NS"]
    pub global_uarte20_ns: GlobalUarte20Ns,
    #[doc = "GLOBAL_SPIM20_S"]
    pub global_spim20_s: GlobalSpim20S,
    #[doc = "GLOBAL_SPIS20_S"]
    pub global_spis20_s: GlobalSpis20S,
    #[doc = "GLOBAL_TWIM20_S"]
    pub global_twim20_s: GlobalTwim20S,
    #[doc = "GLOBAL_TWIS20_S"]
    pub global_twis20_s: GlobalTwis20S,
    #[doc = "GLOBAL_UARTE20_S"]
    pub global_uarte20_s: GlobalUarte20S,
    #[doc = "GLOBAL_SPIM21_NS"]
    pub global_spim21_ns: GlobalSpim21Ns,
    #[doc = "GLOBAL_SPIS21_NS"]
    pub global_spis21_ns: GlobalSpis21Ns,
    #[doc = "GLOBAL_TWIM21_NS"]
    pub global_twim21_ns: GlobalTwim21Ns,
    #[doc = "GLOBAL_TWIS21_NS"]
    pub global_twis21_ns: GlobalTwis21Ns,
    #[doc = "GLOBAL_UARTE21_NS"]
    pub global_uarte21_ns: GlobalUarte21Ns,
    #[doc = "GLOBAL_SPIM21_S"]
    pub global_spim21_s: GlobalSpim21S,
    #[doc = "GLOBAL_SPIS21_S"]
    pub global_spis21_s: GlobalSpis21S,
    #[doc = "GLOBAL_TWIM21_S"]
    pub global_twim21_s: GlobalTwim21S,
    #[doc = "GLOBAL_TWIS21_S"]
    pub global_twis21_s: GlobalTwis21S,
    #[doc = "GLOBAL_UARTE21_S"]
    pub global_uarte21_s: GlobalUarte21S,
    #[doc = "GLOBAL_SPIM22_NS"]
    pub global_spim22_ns: GlobalSpim22Ns,
    #[doc = "GLOBAL_SPIS22_NS"]
    pub global_spis22_ns: GlobalSpis22Ns,
    #[doc = "GLOBAL_TWIM22_NS"]
    pub global_twim22_ns: GlobalTwim22Ns,
    #[doc = "GLOBAL_TWIS22_NS"]
    pub global_twis22_ns: GlobalTwis22Ns,
    #[doc = "GLOBAL_UARTE22_NS"]
    pub global_uarte22_ns: GlobalUarte22Ns,
    #[doc = "GLOBAL_SPIM22_S"]
    pub global_spim22_s: GlobalSpim22S,
    #[doc = "GLOBAL_SPIS22_S"]
    pub global_spis22_s: GlobalSpis22S,
    #[doc = "GLOBAL_TWIM22_S"]
    pub global_twim22_s: GlobalTwim22S,
    #[doc = "GLOBAL_TWIS22_S"]
    pub global_twis22_s: GlobalTwis22S,
    #[doc = "GLOBAL_UARTE22_S"]
    pub global_uarte22_s: GlobalUarte22S,
    #[doc = "GLOBAL_EGU20_NS"]
    pub global_egu20_ns: GlobalEgu20Ns,
    #[doc = "GLOBAL_EGU20_S"]
    pub global_egu20_s: GlobalEgu20S,
    #[doc = "GLOBAL_TIMER20_NS"]
    pub global_timer20_ns: GlobalTimer20Ns,
    #[doc = "GLOBAL_TIMER20_S"]
    pub global_timer20_s: GlobalTimer20S,
    #[doc = "GLOBAL_TIMER21_NS"]
    pub global_timer21_ns: GlobalTimer21Ns,
    #[doc = "GLOBAL_TIMER21_S"]
    pub global_timer21_s: GlobalTimer21S,
    #[doc = "GLOBAL_TIMER22_NS"]
    pub global_timer22_ns: GlobalTimer22Ns,
    #[doc = "GLOBAL_TIMER22_S"]
    pub global_timer22_s: GlobalTimer22S,
    #[doc = "GLOBAL_TIMER23_NS"]
    pub global_timer23_ns: GlobalTimer23Ns,
    #[doc = "GLOBAL_TIMER23_S"]
    pub global_timer23_s: GlobalTimer23S,
    #[doc = "GLOBAL_TIMER24_NS"]
    pub global_timer24_ns: GlobalTimer24Ns,
    #[doc = "GLOBAL_TIMER24_S"]
    pub global_timer24_s: GlobalTimer24S,
    #[doc = "GLOBAL_MEMCONF_NS"]
    pub global_memconf_ns: GlobalMemconfNs,
    #[doc = "GLOBAL_MEMCONF_S"]
    pub global_memconf_s: GlobalMemconfS,
    #[doc = "GLOBAL_PDM20_NS"]
    pub global_pdm20_ns: GlobalPdm20Ns,
    #[doc = "GLOBAL_PDM20_S"]
    pub global_pdm20_s: GlobalPdm20S,
    #[doc = "GLOBAL_PDM21_NS"]
    pub global_pdm21_ns: GlobalPdm21Ns,
    #[doc = "GLOBAL_PDM21_S"]
    pub global_pdm21_s: GlobalPdm21S,
    #[doc = "GLOBAL_PWM20_NS"]
    pub global_pwm20_ns: GlobalPwm20Ns,
    #[doc = "GLOBAL_PWM20_S"]
    pub global_pwm20_s: GlobalPwm20S,
    #[doc = "GLOBAL_PWM21_NS"]
    pub global_pwm21_ns: GlobalPwm21Ns,
    #[doc = "GLOBAL_PWM21_S"]
    pub global_pwm21_s: GlobalPwm21S,
    #[doc = "GLOBAL_PWM22_NS"]
    pub global_pwm22_ns: GlobalPwm22Ns,
    #[doc = "GLOBAL_PWM22_S"]
    pub global_pwm22_s: GlobalPwm22S,
    #[doc = "GLOBAL_SAADC_NS"]
    pub global_saadc_ns: GlobalSaadcNs,
    #[doc = "GLOBAL_SAADC_S"]
    pub global_saadc_s: GlobalSaadcS,
    #[doc = "GLOBAL_NFCT_NS"]
    pub global_nfct_ns: GlobalNfctNs,
    #[doc = "GLOBAL_NFCT_S"]
    pub global_nfct_s: GlobalNfctS,
    #[doc = "GLOBAL_TEMP_NS"]
    pub global_temp_ns: GlobalTempNs,
    #[doc = "GLOBAL_TEMP_S"]
    pub global_temp_s: GlobalTempS,
    #[doc = "GLOBAL_P1_NS"]
    pub global_p1_ns: GlobalP1Ns,
    #[doc = "GLOBAL_P1_S"]
    pub global_p1_s: GlobalP1S,
    #[doc = "GLOBAL_GPIOTE20_NS"]
    pub global_gpiote20_ns: GlobalGpiote20Ns,
    #[doc = "GLOBAL_GPIOTE20_S"]
    pub global_gpiote20_s: GlobalGpiote20S,
    #[doc = "GLOBAL_TAMPC_S"]
    pub global_tampc_s: GlobalTampcS,
    #[doc = "GLOBAL_I2S20_NS"]
    pub global_i2s20_ns: GlobalI2s20Ns,
    #[doc = "GLOBAL_I2S20_S"]
    pub global_i2s20_s: GlobalI2s20S,
    #[doc = "GLOBAL_QDEC20_NS"]
    pub global_qdec20_ns: GlobalQdec20Ns,
    #[doc = "GLOBAL_QDEC20_S"]
    pub global_qdec20_s: GlobalQdec20S,
    #[doc = "GLOBAL_QDEC21_NS"]
    pub global_qdec21_ns: GlobalQdec21Ns,
    #[doc = "GLOBAL_QDEC21_S"]
    pub global_qdec21_s: GlobalQdec21S,
    #[doc = "GLOBAL_GRTC_NS"]
    pub global_grtc_ns: GlobalGrtcNs,
    #[doc = "GLOBAL_GRTC_S"]
    pub global_grtc_s: GlobalGrtcS,
    #[doc = "GLOBAL_SPU30_S"]
    pub global_spu30_s: GlobalSpu30S,
    #[doc = "GLOBAL_DPPIC30_NS"]
    pub global_dppic30_ns: GlobalDppic30Ns,
    #[doc = "GLOBAL_DPPIC30_S"]
    pub global_dppic30_s: GlobalDppic30S,
    #[doc = "GLOBAL_PPIB30_NS"]
    pub global_ppib30_ns: GlobalPpib30Ns,
    #[doc = "GLOBAL_PPIB30_S"]
    pub global_ppib30_s: GlobalPpib30S,
    #[doc = "GLOBAL_SPIM30_NS"]
    pub global_spim30_ns: GlobalSpim30Ns,
    #[doc = "GLOBAL_SPIS30_NS"]
    pub global_spis30_ns: GlobalSpis30Ns,
    #[doc = "GLOBAL_TWIM30_NS"]
    pub global_twim30_ns: GlobalTwim30Ns,
    #[doc = "GLOBAL_TWIS30_NS"]
    pub global_twis30_ns: GlobalTwis30Ns,
    #[doc = "GLOBAL_UARTE30_NS"]
    pub global_uarte30_ns: GlobalUarte30Ns,
    #[doc = "GLOBAL_SPIM30_S"]
    pub global_spim30_s: GlobalSpim30S,
    #[doc = "GLOBAL_SPIS30_S"]
    pub global_spis30_s: GlobalSpis30S,
    #[doc = "GLOBAL_TWIM30_S"]
    pub global_twim30_s: GlobalTwim30S,
    #[doc = "GLOBAL_TWIS30_S"]
    pub global_twis30_s: GlobalTwis30S,
    #[doc = "GLOBAL_UARTE30_S"]
    pub global_uarte30_s: GlobalUarte30S,
    #[doc = "GLOBAL_RTC30_NS"]
    pub global_rtc30_ns: GlobalRtc30Ns,
    #[doc = "GLOBAL_RTC30_S"]
    pub global_rtc30_s: GlobalRtc30S,
    #[doc = "GLOBAL_COMP_NS"]
    pub global_comp_ns: GlobalCompNs,
    #[doc = "GLOBAL_LPCOMP_NS"]
    pub global_lpcomp_ns: GlobalLpcompNs,
    #[doc = "GLOBAL_COMP_S"]
    pub global_comp_s: GlobalCompS,
    #[doc = "GLOBAL_LPCOMP_S"]
    pub global_lpcomp_s: GlobalLpcompS,
    #[doc = "GLOBAL_WDT30_S"]
    pub global_wdt30_s: GlobalWdt30S,
    #[doc = "GLOBAL_WDT31_NS"]
    pub global_wdt31_ns: GlobalWdt31Ns,
    #[doc = "GLOBAL_WDT31_S"]
    pub global_wdt31_s: GlobalWdt31S,
    #[doc = "GLOBAL_P0_NS"]
    pub global_p0_ns: GlobalP0Ns,
    #[doc = "GLOBAL_P0_S"]
    pub global_p0_s: GlobalP0S,
    #[doc = "GLOBAL_GPIOTE30_NS"]
    pub global_gpiote30_ns: GlobalGpiote30Ns,
    #[doc = "GLOBAL_GPIOTE30_S"]
    pub global_gpiote30_s: GlobalGpiote30S,
    #[doc = "GLOBAL_CLOCK_NS"]
    pub global_clock_ns: GlobalClockNs,
    #[doc = "GLOBAL_POWER_NS"]
    pub global_power_ns: GlobalPowerNs,
    #[doc = "GLOBAL_RESET_NS"]
    pub global_reset_ns: GlobalResetNs,
    #[doc = "GLOBAL_CLOCK_S"]
    pub global_clock_s: GlobalClockS,
    #[doc = "GLOBAL_POWER_S"]
    pub global_power_s: GlobalPowerS,
    #[doc = "GLOBAL_RESET_S"]
    pub global_reset_s: GlobalResetS,
    #[doc = "GLOBAL_OSCILLATORS_NS"]
    pub global_oscillators_ns: GlobalOscillatorsNs,
    #[doc = "GLOBAL_REGULATORS_NS"]
    pub global_regulators_ns: GlobalRegulatorsNs,
    #[doc = "GLOBAL_OSCILLATORS_S"]
    pub global_oscillators_s: GlobalOscillatorsS,
    #[doc = "GLOBAL_REGULATORS_S"]
    pub global_regulators_s: GlobalRegulatorsS,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            global_ficr_ns: GlobalFicrNs::steal(),
            global_uicr_s: GlobalUicrS::steal(),
            global_sicr_s: GlobalSicrS::steal(),
            global_cracencore_s: GlobalCracencoreS::steal(),
            vprclic_ns: VprclicNs::steal(),
            global_spu00_s: GlobalSpu00S::steal(),
            global_mpc00_s: GlobalMpc00S::steal(),
            global_dppic00_ns: GlobalDppic00Ns::steal(),
            global_dppic00_s: GlobalDppic00S::steal(),
            global_ppib00_ns: GlobalPpib00Ns::steal(),
            global_ppib00_s: GlobalPpib00S::steal(),
            global_ppib01_ns: GlobalPpib01Ns::steal(),
            global_ppib01_s: GlobalPpib01S::steal(),
            global_kmu_s: GlobalKmuS::steal(),
            global_aar00_ns: GlobalAar00Ns::steal(),
            global_ccm00_ns: GlobalCcm00Ns::steal(),
            global_aar00_s: GlobalAar00S::steal(),
            global_ccm00_s: GlobalCcm00S::steal(),
            global_ecb00_ns: GlobalEcb00Ns::steal(),
            global_ecb00_s: GlobalEcb00S::steal(),
            global_cracen_s: GlobalCracenS::steal(),
            global_spim00_ns: GlobalSpim00Ns::steal(),
            global_spis00_ns: GlobalSpis00Ns::steal(),
            global_uarte00_ns: GlobalUarte00Ns::steal(),
            global_spim00_s: GlobalSpim00S::steal(),
            global_spis00_s: GlobalSpis00S::steal(),
            global_uarte00_s: GlobalUarte00S::steal(),
            global_glitchdet_s: GlobalGlitchdetS::steal(),
            global_rramc_s: GlobalRramcS::steal(),
            global_vpr00_ns: GlobalVpr00Ns::steal(),
            global_vpr00_s: GlobalVpr00S::steal(),
            global_p2_ns: GlobalP2Ns::steal(),
            global_p2_s: GlobalP2S::steal(),
            global_ctrlap_ns: GlobalCtrlapNs::steal(),
            global_ctrlap_s: GlobalCtrlapS::steal(),
            global_tad_ns: GlobalTadNs::steal(),
            global_tad_s: GlobalTadS::steal(),
            global_timer00_ns: GlobalTimer00Ns::steal(),
            global_timer00_s: GlobalTimer00S::steal(),
            global_spu10_s: GlobalSpu10S::steal(),
            global_dppic10_ns: GlobalDppic10Ns::steal(),
            global_dppic10_s: GlobalDppic10S::steal(),
            global_ppib10_ns: GlobalPpib10Ns::steal(),
            global_ppib10_s: GlobalPpib10S::steal(),
            global_ppib11_ns: GlobalPpib11Ns::steal(),
            global_ppib11_s: GlobalPpib11S::steal(),
            global_timer10_ns: GlobalTimer10Ns::steal(),
            global_timer10_s: GlobalTimer10S::steal(),
            global_rtc10_ns: GlobalRtc10Ns::steal(),
            global_rtc10_s: GlobalRtc10S::steal(),
            global_egu10_ns: GlobalEgu10Ns::steal(),
            global_egu10_s: GlobalEgu10S::steal(),
            global_radio_ns: GlobalRadioNs::steal(),
            global_radio_s: GlobalRadioS::steal(),
            global_spu20_s: GlobalSpu20S::steal(),
            global_dppic20_ns: GlobalDppic20Ns::steal(),
            global_dppic20_s: GlobalDppic20S::steal(),
            global_ppib20_ns: GlobalPpib20Ns::steal(),
            global_ppib20_s: GlobalPpib20S::steal(),
            global_ppib21_ns: GlobalPpib21Ns::steal(),
            global_ppib21_s: GlobalPpib21S::steal(),
            global_ppib22_ns: GlobalPpib22Ns::steal(),
            global_ppib22_s: GlobalPpib22S::steal(),
            global_spim20_ns: GlobalSpim20Ns::steal(),
            global_spis20_ns: GlobalSpis20Ns::steal(),
            global_twim20_ns: GlobalTwim20Ns::steal(),
            global_twis20_ns: GlobalTwis20Ns::steal(),
            global_uarte20_ns: GlobalUarte20Ns::steal(),
            global_spim20_s: GlobalSpim20S::steal(),
            global_spis20_s: GlobalSpis20S::steal(),
            global_twim20_s: GlobalTwim20S::steal(),
            global_twis20_s: GlobalTwis20S::steal(),
            global_uarte20_s: GlobalUarte20S::steal(),
            global_spim21_ns: GlobalSpim21Ns::steal(),
            global_spis21_ns: GlobalSpis21Ns::steal(),
            global_twim21_ns: GlobalTwim21Ns::steal(),
            global_twis21_ns: GlobalTwis21Ns::steal(),
            global_uarte21_ns: GlobalUarte21Ns::steal(),
            global_spim21_s: GlobalSpim21S::steal(),
            global_spis21_s: GlobalSpis21S::steal(),
            global_twim21_s: GlobalTwim21S::steal(),
            global_twis21_s: GlobalTwis21S::steal(),
            global_uarte21_s: GlobalUarte21S::steal(),
            global_spim22_ns: GlobalSpim22Ns::steal(),
            global_spis22_ns: GlobalSpis22Ns::steal(),
            global_twim22_ns: GlobalTwim22Ns::steal(),
            global_twis22_ns: GlobalTwis22Ns::steal(),
            global_uarte22_ns: GlobalUarte22Ns::steal(),
            global_spim22_s: GlobalSpim22S::steal(),
            global_spis22_s: GlobalSpis22S::steal(),
            global_twim22_s: GlobalTwim22S::steal(),
            global_twis22_s: GlobalTwis22S::steal(),
            global_uarte22_s: GlobalUarte22S::steal(),
            global_egu20_ns: GlobalEgu20Ns::steal(),
            global_egu20_s: GlobalEgu20S::steal(),
            global_timer20_ns: GlobalTimer20Ns::steal(),
            global_timer20_s: GlobalTimer20S::steal(),
            global_timer21_ns: GlobalTimer21Ns::steal(),
            global_timer21_s: GlobalTimer21S::steal(),
            global_timer22_ns: GlobalTimer22Ns::steal(),
            global_timer22_s: GlobalTimer22S::steal(),
            global_timer23_ns: GlobalTimer23Ns::steal(),
            global_timer23_s: GlobalTimer23S::steal(),
            global_timer24_ns: GlobalTimer24Ns::steal(),
            global_timer24_s: GlobalTimer24S::steal(),
            global_memconf_ns: GlobalMemconfNs::steal(),
            global_memconf_s: GlobalMemconfS::steal(),
            global_pdm20_ns: GlobalPdm20Ns::steal(),
            global_pdm20_s: GlobalPdm20S::steal(),
            global_pdm21_ns: GlobalPdm21Ns::steal(),
            global_pdm21_s: GlobalPdm21S::steal(),
            global_pwm20_ns: GlobalPwm20Ns::steal(),
            global_pwm20_s: GlobalPwm20S::steal(),
            global_pwm21_ns: GlobalPwm21Ns::steal(),
            global_pwm21_s: GlobalPwm21S::steal(),
            global_pwm22_ns: GlobalPwm22Ns::steal(),
            global_pwm22_s: GlobalPwm22S::steal(),
            global_saadc_ns: GlobalSaadcNs::steal(),
            global_saadc_s: GlobalSaadcS::steal(),
            global_nfct_ns: GlobalNfctNs::steal(),
            global_nfct_s: GlobalNfctS::steal(),
            global_temp_ns: GlobalTempNs::steal(),
            global_temp_s: GlobalTempS::steal(),
            global_p1_ns: GlobalP1Ns::steal(),
            global_p1_s: GlobalP1S::steal(),
            global_gpiote20_ns: GlobalGpiote20Ns::steal(),
            global_gpiote20_s: GlobalGpiote20S::steal(),
            global_tampc_s: GlobalTampcS::steal(),
            global_i2s20_ns: GlobalI2s20Ns::steal(),
            global_i2s20_s: GlobalI2s20S::steal(),
            global_qdec20_ns: GlobalQdec20Ns::steal(),
            global_qdec20_s: GlobalQdec20S::steal(),
            global_qdec21_ns: GlobalQdec21Ns::steal(),
            global_qdec21_s: GlobalQdec21S::steal(),
            global_grtc_ns: GlobalGrtcNs::steal(),
            global_grtc_s: GlobalGrtcS::steal(),
            global_spu30_s: GlobalSpu30S::steal(),
            global_dppic30_ns: GlobalDppic30Ns::steal(),
            global_dppic30_s: GlobalDppic30S::steal(),
            global_ppib30_ns: GlobalPpib30Ns::steal(),
            global_ppib30_s: GlobalPpib30S::steal(),
            global_spim30_ns: GlobalSpim30Ns::steal(),
            global_spis30_ns: GlobalSpis30Ns::steal(),
            global_twim30_ns: GlobalTwim30Ns::steal(),
            global_twis30_ns: GlobalTwis30Ns::steal(),
            global_uarte30_ns: GlobalUarte30Ns::steal(),
            global_spim30_s: GlobalSpim30S::steal(),
            global_spis30_s: GlobalSpis30S::steal(),
            global_twim30_s: GlobalTwim30S::steal(),
            global_twis30_s: GlobalTwis30S::steal(),
            global_uarte30_s: GlobalUarte30S::steal(),
            global_rtc30_ns: GlobalRtc30Ns::steal(),
            global_rtc30_s: GlobalRtc30S::steal(),
            global_comp_ns: GlobalCompNs::steal(),
            global_lpcomp_ns: GlobalLpcompNs::steal(),
            global_comp_s: GlobalCompS::steal(),
            global_lpcomp_s: GlobalLpcompS::steal(),
            global_wdt30_s: GlobalWdt30S::steal(),
            global_wdt31_ns: GlobalWdt31Ns::steal(),
            global_wdt31_s: GlobalWdt31S::steal(),
            global_p0_ns: GlobalP0Ns::steal(),
            global_p0_s: GlobalP0S::steal(),
            global_gpiote30_ns: GlobalGpiote30Ns::steal(),
            global_gpiote30_s: GlobalGpiote30S::steal(),
            global_clock_ns: GlobalClockNs::steal(),
            global_power_ns: GlobalPowerNs::steal(),
            global_reset_ns: GlobalResetNs::steal(),
            global_clock_s: GlobalClockS::steal(),
            global_power_s: GlobalPowerS::steal(),
            global_reset_s: GlobalResetS::steal(),
            global_oscillators_ns: GlobalOscillatorsNs::steal(),
            global_regulators_ns: GlobalRegulatorsNs::steal(),
            global_oscillators_s: GlobalOscillatorsS::steal(),
            global_regulators_s: GlobalRegulatorsS::steal(),
        }
    }
}
